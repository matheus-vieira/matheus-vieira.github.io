<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matheus Costa Vieira - Senior Software Engineer, Dad &amp; Husband</title>
    <description>Here you can find some personal information, resume and blog from Matheus Costa Vieira</description>
    <link>http://matheus-vieira.github.io/</link>
    <atom:link href="http://matheus-vieira.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 08 Jul 2025 17:24:43 -0300</pubDate>
    <lastBuildDate>Tue, 08 Jul 2025 17:24:43 -0300</lastBuildDate>
    <generator>Jekyll v3.10.0</generator>
    
      <item>
        <title>Design Patterns que Uso Diariamente no Desenvolvimento Backend .NET</title>
        <description>&lt;p&gt;Como desenvolvedor backend .NET, descobri que certos design patterns consistentemente provam seu valor em aplicações do mundo real. Hoje, quero compartilhar três patterns que se tornaram ferramentas essenciais no meu arsenal de desenvolvimento: &lt;strong&gt;Repository&lt;/strong&gt;, &lt;strong&gt;Strategy&lt;/strong&gt; e &lt;strong&gt;Mediator&lt;/strong&gt; patterns.&lt;/p&gt;

&lt;p&gt;Estes não são apenas conceitos teóricos—são soluções práticas que implemento diariamente para criar aplicações mais sustentáveis, testáveis e escaláveis.&lt;/p&gt;

&lt;h2 id=&quot;1-repository-pattern-simplificando-o-acesso-aos-dados&quot;&gt;1. Repository Pattern: Simplificando o Acesso aos Dados&lt;/h2&gt;

&lt;p&gt;O Repository pattern cria uma interface uniforme para acessar dados, independentemente do mecanismo de armazenamento subjacente.&lt;/p&gt;

&lt;h3 id=&quot;por-que-o-repository-pattern-funciona&quot;&gt;Por que o Repository Pattern Funciona&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Testabilidade&lt;/strong&gt;: Fácil de mockar para testes unitários&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Separação de Responsabilidades&lt;/strong&gt;: Lógica de negócio fica independente do acesso a dados&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Flexibilidade&lt;/strong&gt;: Trocar entre diferentes fontes de dados sem quebrar a lógica de negócio&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;exemplo-de-implementação-do-repository&quot;&gt;Exemplo de Implementação do Repository&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public interface IUserRepository
{
    Task&amp;lt;User&amp;gt; GetByIdAsync(int id);
    Task&amp;lt;IEnumerable&amp;lt;User&amp;gt;&amp;gt; GetAllAsync();
    Task&amp;lt;User&amp;gt; CreateAsync(User user);
    Task UpdateAsync(User user);
    Task DeleteAsync(int id);
}

public class UserRepository : IUserRepository
{
    private readonly ApplicationDbContext _context;

    public UserRepository(ApplicationDbContext context)
    {
        _context = context;
    }

    public async Task&amp;lt;User&amp;gt; GetByIdAsync(int id)
    {
        return await _context.Users
            .FirstOrDefaultAsync(u =&amp;gt; u.Id == id);
    }

    public async Task&amp;lt;IEnumerable&amp;lt;User&amp;gt;&amp;gt; GetAllAsync()
    {
        return await _context.Users
            .ToListAsync();
    }

    // Outros métodos...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;benefícios-do-repository-pattern&quot;&gt;Benefícios do Repository Pattern&lt;/h3&gt;

&lt;p&gt;Em um projeto recente, precisamos migrar do SQL Server para CosmosDB. Graças ao Repository pattern, só precisamos implementar uma nova classe repository—zero mudanças na lógica de negócio.&lt;/p&gt;

&lt;h2 id=&quot;2-strategy-pattern-algoritmos-intercambiáveis-e-flexíveis&quot;&gt;2. Strategy Pattern: Algoritmos Intercambiáveis e Flexíveis&lt;/h2&gt;

&lt;p&gt;O Strategy pattern permite definir uma família de algoritmos, encapsulá-los e torná-los intercambiáveis em tempo de execução.&lt;/p&gt;

&lt;h3 id=&quot;por-que-o-strategy-pattern-se-destaca&quot;&gt;Por que o Strategy Pattern se Destaca&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Princípio Aberto/Fechado&lt;/strong&gt;: Adicionar novas estratégias sem modificar código existente&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Flexibilidade em Runtime&lt;/strong&gt;: Escolher algoritmos baseado no contexto&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Testabilidade&lt;/strong&gt;: Testar cada estratégia isoladamente&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;exemplo-de-implementação-do-strategy&quot;&gt;Exemplo de Implementação do Strategy&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public interface IPaymentProcessor
{
    Task&amp;lt;PaymentResult&amp;gt; ProcessAsync(PaymentRequest request);
    bool CanProcess(PaymentMethod method);
}

public class CreditCardProcessor : IPaymentProcessor
{
    public async Task&amp;lt;PaymentResult&amp;gt; ProcessAsync(PaymentRequest request)
    {
        // Lógica de processamento de cartão de crédito
        return await ProcessCreditCardAsync(request);
    }

    public bool CanProcess(PaymentMethod method)
        =&amp;gt; method == PaymentMethod.CreditCard;
}

public class PixProcessor : IPaymentProcessor
{
    public async Task&amp;lt;PaymentResult&amp;gt; ProcessAsync(PaymentRequest request)
    {
        // Lógica de processamento PIX
        return await ProcessPixAsync(request);
    }

    public bool CanProcess(PaymentMethod method)
        =&amp;gt; method == PaymentMethod.Pix;
}

public class PaymentService
{
    private readonly IEnumerable&amp;lt;IPaymentProcessor&amp;gt; _processors;

    public PaymentService(IEnumerable&amp;lt;IPaymentProcessor&amp;gt; processors)
    {
        _processors = processors;
    }

    public async Task&amp;lt;PaymentResult&amp;gt; ProcessPaymentAsync(PaymentRequest request)
    {
        var processor = _processors
            .FirstOrDefault(p =&amp;gt; p.CanProcess(request.Method));

        if (processor == null)
            throw new NotSupportedException($&quot;Método de pagamento {request.Method} não suportado&quot;);

        return await processor.ProcessAsync(request);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;benefícios-do-strategy-pattern&quot;&gt;Benefícios do Strategy Pattern&lt;/h3&gt;

&lt;p&gt;Quando precisamos adicionar novos métodos de pagamento, simplesmente criamos novas classes processor. O código existente permaneceu intocado, e os testes foram diretos já que cada processor é independente.&lt;/p&gt;

&lt;h2 id=&quot;3-mediator-pattern-centralizando-a-comunicação-entre-componentes&quot;&gt;3. Mediator Pattern: Centralizando a Comunicação Entre Componentes&lt;/h2&gt;

&lt;p&gt;O Mediator pattern define como um conjunto de objetos interagem entre si, promovendo baixo acoplamento ao prevenir que objetos se refiram uns aos outros explicitamente.&lt;/p&gt;

&lt;h3 id=&quot;por-que-o-mediator-pattern-funciona&quot;&gt;Por que o Mediator Pattern Funciona&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Desacoplamento&lt;/strong&gt;: Componentes não precisam conhecer uns aos outros&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Responsabilidade Única&lt;/strong&gt;: Cada handler foca em uma tarefa específica&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cross-cutting Concerns&lt;/strong&gt;: Fácil adicionar validação, logging, cache através de behaviors&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;implementação-do-mediator-com-mediatr&quot;&gt;Implementação do Mediator com MediatR&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class CreateUserCommand : IRequest&amp;lt;UserDto&amp;gt;
{
    public string Name { get; set; }
    public string Email { get; set; }
}

public class CreateUserCommandHandler : IRequestHandler&amp;lt;CreateUserCommand, UserDto&amp;gt;
{
    private readonly IUserRepository _userRepository;
    private readonly IMapper _mapper;

    public CreateUserCommandHandler(IUserRepository userRepository, IMapper mapper)
    {
        _userRepository = userRepository;
        _mapper = mapper;
    }

    public async Task&amp;lt;UserDto&amp;gt; Handle(CreateUserCommand request, CancellationToken cancellationToken)
    {
        var user = new User
        {
            Name = request.Name,
            Email = request.Email,
            CreatedAt = DateTime.UtcNow
        };

        var createdUser = await _userRepository.CreateAsync(user);
        return _mapper.Map&amp;lt;UserDto&amp;gt;(createdUser);
    }
}

// No seu controller
[ApiController]
[Route(&quot;api/[controller]&quot;)]
public class UsersController : ControllerBase
{
    private readonly IMediator _mediator;

    public UsersController(IMediator mediator)
    {
        _mediator = mediator;
    }

    [HttpPost]
    public async Task&amp;lt;ActionResult&amp;lt;UserDto&amp;gt;&amp;gt; CreateUser(CreateUserCommand command)
    {
        var result = await _mediator.Send(command);
        return Ok(result);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;adicionando-cross-cutting-concerns&quot;&gt;Adicionando Cross-Cutting Concerns&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class LoggingBehavior&amp;lt;TRequest, TResponse&amp;gt; : IPipelineBehavior&amp;lt;TRequest, TResponse&amp;gt;
{
    private readonly ILogger&amp;lt;LoggingBehavior&amp;lt;TRequest, TResponse&amp;gt;&amp;gt; _logger;

    public LoggingBehavior(ILogger&amp;lt;LoggingBehavior&amp;lt;TRequest, TResponse&amp;gt;&amp;gt; logger)
    {
        _logger = logger;
    }

    public async Task&amp;lt;TResponse&amp;gt; Handle(TRequest request, RequestHandlerDelegate&amp;lt;TResponse&amp;gt; next, CancellationToken cancellationToken)
    {
        _logger.LogInformation(&quot;Processando {RequestName}&quot;, typeof(TRequest).Name);
        var response = await next();
        _logger.LogInformation(&quot;Processado {RequestName}&quot;, typeof(TRequest).Name);
        return response;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;benefícios-do-mediator-pattern&quot;&gt;Benefícios do Mediator Pattern&lt;/h3&gt;

&lt;p&gt;O Mediator pattern transformou nossos controllers de classes gordas e complexas em coordenadores leves. Adicionar logging, validação e cache se tornou trivial através de pipeline behaviors.&lt;/p&gt;

&lt;h2 id=&quot;configuração-da-injeção-de-dependência&quot;&gt;Configuração da Injeção de Dependência&lt;/h2&gt;

&lt;p&gt;Aqui está como normalmente registro esses patterns no &lt;code&gt;Program.cs&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;// Repository Pattern
builder.Services.AddScoped&amp;lt;IUserRepository, UserRepository&amp;gt;();

// Strategy Pattern
builder.Services.AddScoped&amp;lt;IPaymentProcessor, CreditCardProcessor&amp;gt;();
builder.Services.AddScoped&amp;lt;IPaymentProcessor, PixProcessor&amp;gt;();
builder.Services.AddScoped&amp;lt;PaymentService&amp;gt;();

// Mediator Pattern
builder.Services.AddMediatR(cfg =&amp;gt; cfg.RegisterServicesFromAssembly(typeof(Program).Assembly));
builder.Services.AddTransient(typeof(IPipelineBehavior&amp;lt;,&amp;gt;), typeof(LoggingBehavior&amp;lt;,&amp;gt;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;quando-não-usar-esses-patterns&quot;&gt;Quando NÃO Usar Esses Patterns&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Repository Pattern&lt;/strong&gt;: Pule se você estiver usando Entity Framework com uma aplicação CRUD simples. O EF já fornece abstração.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Strategy Pattern&lt;/strong&gt;: Não complique cenários simples de if/else. Use quando tiver algoritmos complexos ou esperar mudanças frequentes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mediator Pattern&lt;/strong&gt;: Evite para aplicações muito simples. O overhead pode não valer a pena se você não tem lógica de negócio complexa.&lt;/p&gt;

&lt;h2 id=&quot;principais-aprendizados&quot;&gt;Principais Aprendizados&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Repository Pattern&lt;/strong&gt; fornece abstração limpa de acesso a dados&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Strategy Pattern&lt;/strong&gt; permite algoritmos flexíveis e configuráveis em runtime&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mediator Pattern&lt;/strong&gt; desacopla componentes e centraliza lógica de negócio&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Esses patterns consistentemente tornaram minhas aplicações .NET mais sustentáveis, testáveis e adaptáveis a requisitos em mudança. Não são balas de prata, mas quando aplicados apropriadamente, podem melhorar significativamente a qualidade do seu código.&lt;/p&gt;

&lt;h2 id=&quot;o-que-vem-a-seguir&quot;&gt;O que Vem a Seguir?&lt;/h2&gt;

&lt;p&gt;No meu próximo post, vou mergulhar mais fundo na construção de pipelines de ingestão orientados a eventos em .NET, mostrando como esses patterns trabalham juntos em uma arquitetura do mundo real.&lt;/p&gt;

&lt;p&gt;Você já usou esses patterns em seus projetos? Que outros patterns considera essenciais no desenvolvimento .NET? Me conte nos comentários!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Este post faz parte da minha série “.NET &amp;amp; Azure Foundations”. Acompanhe enquanto compartilho insights práticos da construção de sistemas backend escaláveis.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Jul 2025 00:00:00 -0300</pubDate>
        <link>http://matheus-vieira.github.io/blog/dotnet/design-patterns/backend/design-patterns-que-uso-diariamente-no-desenvolvimento-backend-dotnet/</link>
        <guid isPermaLink="true">http://matheus-vieira.github.io/blog/dotnet/design-patterns/backend/design-patterns-que-uso-diariamente-no-desenvolvimento-backend-dotnet/</guid>
        
        <category>csharp</category>
        
        <category>arquitetura</category>
        
        <category>repository-pattern</category>
        
        <category>strategy-pattern</category>
        
        <category>mediator-pattern</category>
        
        
        <category>dotnet</category>
        
        <category>design-patterns</category>
        
        <category>backend</category>
        
      </item>
    
      <item>
        <title>Design Patterns I Use Daily in .NET Backend Development</title>
        <description>&lt;p&gt;As a .NET backend developer, I’ve discovered that certain design patterns consistently prove their worth in real-world applications. Today, I want to share three patterns that have become essential tools in my development arsenal: &lt;strong&gt;Repository&lt;/strong&gt;, &lt;strong&gt;Strategy&lt;/strong&gt;, and &lt;strong&gt;Mediator&lt;/strong&gt; patterns.&lt;/p&gt;

&lt;p&gt;These aren’t just theoretical concepts—they’re practical solutions that I implement daily to create more maintainable, testable, and scalable applications.&lt;/p&gt;

&lt;h2 id=&quot;1-repository-pattern-clean-data-access&quot;&gt;1. Repository Pattern: Clean Data Access&lt;/h2&gt;

&lt;p&gt;The Repository pattern creates a uniform interface for accessing data, regardless of the underlying storage mechanism.&lt;/p&gt;

&lt;h3 id=&quot;why-repository-pattern-works&quot;&gt;Why Repository Pattern Works&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Testability&lt;/strong&gt;: Easy to mock for unit tests&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Separation of Concerns&lt;/strong&gt;: Business logic stays independent of data access&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;: Switch between different data sources without breaking business logic&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;repository-implementation-example&quot;&gt;Repository Implementation Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public interface IUserRepository
{
    Task&amp;lt;User&amp;gt; GetByIdAsync(int id);
    Task&amp;lt;IEnumerable&amp;lt;User&amp;gt;&amp;gt; GetAllAsync();
    Task&amp;lt;User&amp;gt; CreateAsync(User user);
    Task UpdateAsync(User user);
    Task DeleteAsync(int id);
}

public class UserRepository : IUserRepository
{
    private readonly ApplicationDbContext _context;

    public UserRepository(ApplicationDbContext context)
    {
        _context = context;
    }

    public async Task&amp;lt;User&amp;gt; GetByIdAsync(int id)
    {
        return await _context.Users
            .FirstOrDefaultAsync(u =&amp;gt; u.Id == id);
    }

    public async Task&amp;lt;IEnumerable&amp;lt;User&amp;gt;&amp;gt; GetAllAsync()
    {
        return await _context.Users
            .ToListAsync();
    }

    // Other methods...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;repository-pattern-benefits&quot;&gt;Repository Pattern Benefits&lt;/h3&gt;

&lt;p&gt;In a recent project, we needed to migrate from SQL Server to CosmosDB. Thanks to the Repository pattern, we only had to implement a new repository class—zero changes to business logic.&lt;/p&gt;

&lt;h2 id=&quot;2-strategy-pattern-flexible-business-logic&quot;&gt;2. Strategy Pattern: Flexible Business Logic&lt;/h2&gt;

&lt;p&gt;The Strategy pattern allows you to define a family of algorithms, encapsulate them, and make them interchangeable at runtime.&lt;/p&gt;

&lt;h3 id=&quot;why-strategy-pattern-excels&quot;&gt;Why Strategy Pattern Excels&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Open/Closed Principle&lt;/strong&gt;: Add new strategies without modifying existing code&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Runtime Flexibility&lt;/strong&gt;: Choose algorithms based on context&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Testability&lt;/strong&gt;: Test each strategy in isolation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;strategy-implementation-example&quot;&gt;Strategy Implementation Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public interface IPaymentProcessor
{
    Task&amp;lt;PaymentResult&amp;gt; ProcessAsync(PaymentRequest request);
    bool CanProcess(PaymentMethod method);
}

public class CreditCardProcessor : IPaymentProcessor
{
    public async Task&amp;lt;PaymentResult&amp;gt; ProcessAsync(PaymentRequest request)
    {
        // Credit card processing logic
        return await ProcessCreditCardAsync(request);
    }

    public bool CanProcess(PaymentMethod method)
        =&amp;gt; method == PaymentMethod.CreditCard;
}

public class PixProcessor : IPaymentProcessor
{
    public async Task&amp;lt;PaymentResult&amp;gt; ProcessAsync(PaymentRequest request)
    {
        // PIX processing logic
        return await ProcessPixAsync(request);
    }

    public bool CanProcess(PaymentMethod method)
        =&amp;gt; method == PaymentMethod.Pix;
}

public class PaymentService
{
    private readonly IEnumerable&amp;lt;IPaymentProcessor&amp;gt; _processors;

    public PaymentService(IEnumerable&amp;lt;IPaymentProcessor&amp;gt; processors)
    {
        _processors = processors;
    }

    public async Task&amp;lt;PaymentResult&amp;gt; ProcessPaymentAsync(PaymentRequest request)
    {
        var processor = _processors
            .FirstOrDefault(p =&amp;gt; p.CanProcess(request.Method));

        if (processor == null)
            throw new NotSupportedException($&quot;Payment method {request.Method} not supported&quot;);

        return await processor.ProcessAsync(request);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;strategy-pattern-benefits&quot;&gt;Strategy Pattern Benefits&lt;/h3&gt;

&lt;p&gt;When we needed to add new payment methods, we simply created new processor classes. The existing code remained untouched, and testing was straightforward since each processor is independent.&lt;/p&gt;

&lt;h2 id=&quot;3-mediator-pattern-decoupled-communication&quot;&gt;3. Mediator Pattern: Decoupled Communication&lt;/h2&gt;

&lt;p&gt;The Mediator pattern defines how a set of objects interact with each other, promoting loose coupling by preventing objects from referring to each other explicitly.&lt;/p&gt;

&lt;h3 id=&quot;why-mediator-pattern-works&quot;&gt;Why Mediator Pattern Works&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Decoupling&lt;/strong&gt;: Components don’t need to know about each other&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Single Responsibility&lt;/strong&gt;: Each handler focuses on one specific task&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cross-cutting Concerns&lt;/strong&gt;: Easy to add validation, logging, caching through behaviors&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;implementation-with-mediatr&quot;&gt;Implementation with MediatR&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class CreateUserCommand : IRequest&amp;lt;UserDto&amp;gt;
{
    public string Name { get; set; }
    public string Email { get; set; }
}

public class CreateUserCommandHandler : IRequestHandler&amp;lt;CreateUserCommand, UserDto&amp;gt;
{
    private readonly IUserRepository _userRepository;
    private readonly IMapper _mapper;

    public CreateUserCommandHandler(IUserRepository userRepository, IMapper mapper)
    {
        _userRepository = userRepository;
        _mapper = mapper;
    }

    public async Task&amp;lt;UserDto&amp;gt; Handle(CreateUserCommand request, CancellationToken cancellationToken)
    {
        var user = new User
        {
            Name = request.Name,
            Email = request.Email,
            CreatedAt = DateTime.UtcNow
        };

        var createdUser = await _userRepository.CreateAsync(user);
        return _mapper.Map&amp;lt;UserDto&amp;gt;(createdUser);
    }
}

// In your controller
[ApiController]
[Route(&quot;api/[controller]&quot;)]
public class UsersController : ControllerBase
{
    private readonly IMediator _mediator;

    public UsersController(IMediator mediator)
    {
        _mediator = mediator;
    }

    [HttpPost]
    public async Task&amp;lt;ActionResult&amp;lt;UserDto&amp;gt;&amp;gt; CreateUser(CreateUserCommand command)
    {
        var result = await _mediator.Send(command);
        return Ok(result);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;adding-cross-cutting-concerns&quot;&gt;Adding Cross-Cutting Concerns&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class LoggingBehavior&amp;lt;TRequest, TResponse&amp;gt; : IPipelineBehavior&amp;lt;TRequest, TResponse&amp;gt;
{
    private readonly ILogger&amp;lt;LoggingBehavior&amp;lt;TRequest, TResponse&amp;gt;&amp;gt; _logger;

    public LoggingBehavior(ILogger&amp;lt;LoggingBehavior&amp;lt;TRequest, TResponse&amp;gt;&amp;gt; logger)
    {
        _logger = logger;
    }

    public async Task&amp;lt;TResponse&amp;gt; Handle(TRequest request, RequestHandlerDelegate&amp;lt;TResponse&amp;gt; next, CancellationToken cancellationToken)
    {
        _logger.LogInformation(&quot;Handling {RequestName}&quot;, typeof(TRequest).Name);
        var response = await next();
        _logger.LogInformation(&quot;Handled {RequestName}&quot;, typeof(TRequest).Name);
        return response;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;mediator-pattern-benefits&quot;&gt;Mediator Pattern Benefits&lt;/h3&gt;

&lt;p&gt;The Mediator pattern transformed our controllers from fat, complex classes into thin coordinators. Adding logging, validation, and caching became trivial through pipeline behaviors.&lt;/p&gt;

&lt;h2 id=&quot;dependency-injection-setup&quot;&gt;Dependency Injection Setup&lt;/h2&gt;

&lt;p&gt;Here’s how I typically register these patterns in &lt;code&gt;Program.cs&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;// Repository Pattern
builder.Services.AddScoped&amp;lt;IUserRepository, UserRepository&amp;gt;();

// Strategy Pattern
builder.Services.AddScoped&amp;lt;IPaymentProcessor, CreditCardProcessor&amp;gt;();
builder.Services.AddScoped&amp;lt;IPaymentProcessor, PixProcessor&amp;gt;();
builder.Services.AddScoped&amp;lt;PaymentService&amp;gt;();

// Mediator Pattern
builder.Services.AddMediatR(cfg =&amp;gt; cfg.RegisterServicesFromAssembly(typeof(Program).Assembly));
builder.Services.AddTransient(typeof(IPipelineBehavior&amp;lt;,&amp;gt;), typeof(LoggingBehavior&amp;lt;,&amp;gt;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;when-not-to-use-these-patterns&quot;&gt;When NOT to Use These Patterns&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Repository Pattern&lt;/strong&gt;: Skip it if you’re using Entity Framework with a simple CRUD application. EF already provides abstraction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Strategy Pattern&lt;/strong&gt;: Don’t overcomplicate simple if/else scenarios. Use it when you have complex algorithms or expect frequent changes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mediator Pattern&lt;/strong&gt;: Avoid it for very simple applications. The overhead might not be worth it if you don’t have complex business logic.&lt;/p&gt;

&lt;h2 id=&quot;key-takeaways&quot;&gt;Key Takeaways&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Repository Pattern&lt;/strong&gt; provides clean data access abstraction&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Strategy Pattern&lt;/strong&gt; enables flexible, runtime-configurable algorithms&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mediator Pattern&lt;/strong&gt; decouples components and centralizes business logic&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These patterns have consistently made my .NET applications more maintainable, testable, and adaptable to changing requirements. They’re not silver bullets, but when applied appropriately, they can significantly improve your codebase quality.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s Next?&lt;/h2&gt;

&lt;p&gt;In my next post, I’ll dive deeper into building event-driven ingestion pipelines in .NET, showing how these patterns work together in a real-world architecture.&lt;/p&gt;

&lt;p&gt;Have you used these patterns in your projects? What other patterns do you find essential in .NET development? Let me know in the comments!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;This post is part of my “.NET &amp;amp; Azure Foundations” series. Follow along as I share practical insights from building scalable backend systems.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Jul 2025 00:00:00 -0300</pubDate>
        <link>http://matheus-vieira.github.io/blog/dotnet/design-patterns/backend/design-patterns-i-use-daily-in-dotnet-backend-development/</link>
        <guid isPermaLink="true">http://matheus-vieira.github.io/blog/dotnet/design-patterns/backend/design-patterns-i-use-daily-in-dotnet-backend-development/</guid>
        
        <category>csharp</category>
        
        <category>architecture</category>
        
        <category>repository-pattern</category>
        
        <category>strategy-pattern</category>
        
        <category>mediator-pattern</category>
        
        
        <category>dotnet</category>
        
        <category>design-patterns</category>
        
        <category>backend</category>
        
      </item>
    
      <item>
        <title>RabbitMQ: Handling High Volumes Without Losing Control</title>
        <description>&lt;p&gt;When you’re building backend systems that need to handle thousands or millions of messages daily, having a robust messaging infrastructure becomes critical. In my experience architecting distributed systems for financial and e-commerce platforms, RabbitMQ has proven to be a reliable workhorse for managing high-volume message processing without losing control over your system’s reliability.&lt;/p&gt;

&lt;p&gt;Let me share a real-world architecture and practical implementation that has successfully handled peak loads of 100,000+ messages per minute in production.&lt;/p&gt;

&lt;h2 id=&quot;️-the-architecture-financial-transaction-processing&quot;&gt;🏗️ The Architecture: Financial Transaction Processing&lt;/h2&gt;

&lt;p&gt;Here’s a simplified diagram of a financial transaction processing system I’ve implemented:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[Web API] → [RabbitMQ Exchange] → [Multiple Queues] → [Worker Services]
    ↓              ↓                    ↓               ↓
[Validation]   [Routing]           [Buffering]    [Processing]
    ↓              ↓                    ↓               ↓
[Database]     [Dead Letter]       [Retry Logic]   [Notifications]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Key Components:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Topic Exchange&lt;/strong&gt;: Routes messages based on transaction type and priority&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Durable Queues&lt;/strong&gt;: Ensures message persistence across system restarts&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Multiple Worker Services&lt;/strong&gt;: Horizontal scaling for processing capacity&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dead Letter Queues&lt;/strong&gt;: Handles failed messages gracefully&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Circuit Breakers&lt;/strong&gt;: Prevents cascade failures&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-implementation-net-core-worker-services&quot;&gt;🚀 Implementation: .NET Core Worker Services&lt;/h2&gt;

&lt;p&gt;Here’s how I implement the core components:&lt;/p&gt;

&lt;h3 id=&quot;1-message-publisher-web-api&quot;&gt;1. Message Publisher (Web API)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class TransactionPublisher
{
    private readonly IConnection _connection;
    private readonly IModel _channel;
    
    public TransactionPublisher(IConfiguration config)
    {
        var factory = new ConnectionFactory()
        {
            HostName = config[&quot;RabbitMQ:Host&quot;],
            Port = config.GetValue&amp;lt;int&amp;gt;(&quot;RabbitMQ:Port&quot;),
            UserName = config[&quot;RabbitMQ:Username&quot;],
            Password = config[&quot;RabbitMQ:Password&quot;],
            VirtualHost = config[&quot;RabbitMQ:VirtualHost&quot;]
        };
        
        _connection = factory.CreateConnection();
        _channel = _connection.CreateModel();
        
        // Declare exchange
        _channel.ExchangeDeclare(
            exchange: &quot;transactions.topic&quot;,
            type: ExchangeType.Topic,
            durable: true
        );
    }

    public async Task PublishTransactionAsync(TransactionRequest transaction)
    {
        var routingKey = $&quot;transaction.{transaction.Type}.{transaction.Priority}&quot;;
        var message = JsonSerializer.Serialize(transaction);
        var body = Encoding.UTF8.GetBytes(message);

        var properties = _channel.CreateBasicProperties();
        properties.Persistent = true; // Message survives broker restart
        properties.MessageId = Guid.NewGuid().ToString();
        properties.Timestamp = new AmqpTimestamp(DateTimeOffset.UtcNow.ToUnixTimeSeconds());

        _channel.BasicPublish(
            exchange: &quot;transactions.topic&quot;,
            routingKey: routingKey,
            basicProperties: properties,
            body: body
        );

        // Optional: Confirm publication
        _channel.WaitForConfirmsOrDie(TimeSpan.FromSeconds(5));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;2-queue-setup-and-configuration&quot;&gt;2. Queue Setup and Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class QueueConfiguration
{
    public static void ConfigureQueues(IModel channel)
    {
        // High priority transaction queue
        var highPriorityArgs = new Dictionary&amp;lt;string, object&amp;gt;
        {
            {&quot;x-message-ttl&quot;, 300000}, // 5 minutes TTL
            {&quot;x-dead-letter-exchange&quot;, &quot;transactions.dlx&quot;},
            {&quot;x-dead-letter-routing-key&quot;, &quot;high-priority.failed&quot;},
            {&quot;x-max-retries&quot;, 3}
        };

        channel.QueueDeclare(
            queue: &quot;transactions.high-priority&quot;,
            durable: true,
            exclusive: false,
            autoDelete: false,
            arguments: highPriorityArgs
        );

        // Normal priority transaction queue
        var normalPriorityArgs = new Dictionary&amp;lt;string, object&amp;gt;
        {
            {&quot;x-message-ttl&quot;, 600000}, // 10 minutes TTL
            {&quot;x-dead-letter-exchange&quot;, &quot;transactions.dlx&quot;},
            {&quot;x-dead-letter-routing-key&quot;, &quot;normal.failed&quot;},
            {&quot;x-max-retries&quot;, 5}
        };

        channel.QueueDeclare(
            queue: &quot;transactions.normal-priority&quot;,
            durable: true,
            exclusive: false,
            autoDelete: false,
            arguments: normalPriorityArgs
        );

        // Bind queues to exchange
        channel.QueueBind(&quot;transactions.high-priority&quot;, &quot;transactions.topic&quot;, &quot;transaction.*.high&quot;);
        channel.QueueBind(&quot;transactions.normal-priority&quot;, &quot;transactions.topic&quot;, &quot;transaction.*.normal&quot;);
        channel.QueueBind(&quot;transactions.normal-priority&quot;, &quot;transactions.topic&quot;, &quot;transaction.*.low&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;3-high-performance-consumer&quot;&gt;3. High-Performance Consumer&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class TransactionWorkerService : BackgroundService
{
    private readonly ILogger&amp;lt;TransactionWorkerService&amp;gt; _logger;
    private readonly IServiceProvider _serviceProvider;
    private IConnection _connection;
    private IModel _channel;
    private readonly SemaphoreSlim _semaphore;

    public TransactionWorkerService(
        ILogger&amp;lt;TransactionWorkerService&amp;gt; logger,
        IServiceProvider serviceProvider)
    {
        _logger = logger;
        _serviceProvider = serviceProvider;
        _semaphore = new SemaphoreSlim(Environment.ProcessorCount * 2); // Limit concurrent processing
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        InitializeRabbitMQ();

        var consumer = new AsyncEventingBasicConsumer(_channel);
        consumer.Received += async (model, ea) =&amp;gt;
        {
            await _semaphore.WaitAsync(stoppingToken);
            
            try
            {
                await ProcessMessageAsync(ea);
                _channel.BasicAck(ea.DeliveryTag, false);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, &quot;Error processing message {MessageId}&quot;, ea.BasicProperties.MessageId);
                
                // Implement retry logic
                var shouldRetry = ShouldRetry(ea);
                // if shouldRetry true -&amp;gt; requeue
                // if shouldRetry false -&amp;gt; send to DLQ
                _channel.BasicNack(ea.DeliveryTag, false, shouldRetry);
            }
            finally
            {
                _semaphore.Release();
            }
        };

        _channel.BasicConsume(
            queue: &quot;transactions.high-priority&quot;,
            autoAck: false, // Manual acknowledgment for reliability
            consumer: consumer
        );

        // Keep the service running
        while (!stoppingToken.IsCancellationRequested)
        {
            await Task.Delay(1000, stoppingToken);
        }
    }

    private async Task ProcessMessageAsync(BasicDeliverEventArgs ea)
    {
        using var scope = _serviceProvider.CreateScope();
        var processor = scope.ServiceProvider.GetRequiredService&amp;lt;ITransactionProcessor&amp;gt;();
        
        var body = ea.Body.ToArray();
        var message = Encoding.UTF8.GetString(body);
        var transaction = JsonSerializer.Deserialize&amp;lt;TransactionRequest&amp;gt;(message);

        await processor.ProcessAsync(transaction);
    }

    private bool ShouldRetry(BasicDeliverEventArgs ea)
    {
        // Check retry count from headers
        var retryCount = ea.BasicProperties.Headers?.ContainsKey(&quot;x-retry-count&quot;) == true
            ? (int)ea.BasicProperties.Headers[&quot;x-retry-count&quot;]
            : 0;

        return retryCount &amp;lt; 3;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-monitoring-and-observability&quot;&gt;📊 Monitoring and Observability&lt;/h2&gt;

&lt;p&gt;Monitoring high-volume systems is crucial. Here’s how I implement comprehensive observability:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class RabbitMQMetrics
{
    private readonly ILogger&amp;lt;RabbitMQMetrics&amp;gt; _logger;
    private readonly IMetrics _metrics;

    public void RecordMessagePublished(string queueName)
    {
        _metrics.Measure.Counter.Increment(&quot;rabbitmq.messages.published&quot;, 
            new MetricTags(&quot;queue&quot;, queueName));
    }

    public void RecordMessageProcessed(string queueName, TimeSpan processingTime)
    {
        _metrics.Measure.Counter.Increment(&quot;rabbitmq.messages.processed&quot;,
            new MetricTags(&quot;queue&quot;, queueName));
        
        _metrics.Measure.Timer.Time(&quot;rabbitmq.processing.duration&quot;,
            processingTime, new MetricTags(&quot;queue&quot;, queueName));
    }

    public void RecordMessageFailed(string queueName, string errorType)
    {
        _metrics.Measure.Counter.Increment(&quot;rabbitmq.messages.failed&quot;,
            new MetricTags(&quot;queue&quot;, queueName, &quot;error_type&quot;, errorType));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;️-best-practices-for-high-volume-processing&quot;&gt;🛡️ Best Practices for High-Volume Processing&lt;/h2&gt;

&lt;h3 id=&quot;1-connection-management&quot;&gt;1. Connection Management&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;// Use connection pooling for high-throughput scenarios
public class RabbitMQConnectionPool
{
    private readonly ConcurrentQueue&amp;lt;IConnection&amp;gt; _connections = new();
    private readonly SemaphoreSlim _semaphore;

    public async Task&amp;lt;IConnection&amp;gt; GetConnectionAsync()
    {
        await _semaphore.WaitAsync();
        
        if (_connections.TryDequeue(out var connection) &amp;amp;&amp;amp; connection.IsOpen)
        {
            return connection;
        }

        return CreateNewConnection();
    }

    public void ReturnConnection(IConnection connection)
    {
        if (connection.IsOpen)
        {
            _connections.Enqueue(connection);
        }
        
        _semaphore.Release();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;2-batch-processing&quot;&gt;2. Batch Processing&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class BatchTransactionProcessor
{
    private readonly List&amp;lt;TransactionRequest&amp;gt; _batch = new();
    private readonly Timer _flushTimer;

    public async Task AddToBatchAsync(TransactionRequest transaction)
    {
        lock (_batch)
        {
            _batch.Add(transaction);
            
            if (_batch.Count &amp;gt;= 100) // Batch size
            {
                _ = Task.Run(FlushBatchAsync);
            }
        }
    }

    private async Task FlushBatchAsync()
    {
        List&amp;lt;TransactionRequest&amp;gt; currentBatch;
        
        lock (_batch)
        {
            currentBatch = new List&amp;lt;TransactionRequest&amp;gt;(_batch);
            _batch.Clear();
        }

        if (currentBatch.Any())
        {
            await ProcessBatchAsync(currentBatch);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-configuration-for-production&quot;&gt;🔧 Configuration for Production&lt;/h2&gt;

&lt;h3 id=&quot;rabbitmq-configuration&quot;&gt;RabbitMQ Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;RabbitMQ&quot;: {
    &quot;Host&quot;: &quot;localhost&quot;,
    &quot;Port&quot;: 5672,
    &quot;Username&quot;: &quot;guest&quot;,
    &quot;Password&quot;: &quot;guest&quot;,
    &quot;VirtualHost&quot;: &quot;/&quot;,
    &quot;ConnectionPoolSize&quot;: 10,
    &quot;ChannelPoolSize&quot;: 50,
    &quot;PrefetchCount&quot;: 100,
    &quot;ConfirmSelect&quot;: true,
    &quot;Heartbeat&quot;: 60
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;worker-service-scaling&quot;&gt;Worker Service Scaling&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Docker Compose for horizontal scaling
version: &apos;3.8&apos;
services:
  transaction-worker:
    image: transaction-worker:latest
    scale: 5  # Multiple instances
    environment:
      - RABBITMQ_HOST=rabbitmq
      - WORKER_CONCURRENCY=10
    depends_on:
      - rabbitmq
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-results-and-benefits&quot;&gt;📈 Results and Benefits&lt;/h2&gt;

&lt;p&gt;In production, this architecture has delivered:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Throughput&lt;/strong&gt;: 100,000+ messages/minute during peak hours&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Latency&lt;/strong&gt;: Average processing time under 50ms&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reliability&lt;/strong&gt;: 99.9% message delivery success rate&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt;: Linear scaling by adding worker instances&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Observability&lt;/strong&gt;: Complete visibility into message flow and system health&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-key-takeaways&quot;&gt;🎯 Key Takeaways&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Design for Failure&lt;/strong&gt;: Always implement dead letter queues and retry mechanisms&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Monitor Everything&lt;/strong&gt;: Track message flow, processing times, and error rates&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scale Horizontally&lt;/strong&gt;: Use multiple worker instances rather than increasing single-instance capacity&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Batch When Possible&lt;/strong&gt;: Group operations to improve database and external API efficiency&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test Under Load&lt;/strong&gt;: Use tools like NBomber or Artillery to validate your architecture&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;RabbitMQ’s robustness combined with .NET’s performance makes it an excellent choice for building reliable, high-volume messaging systems. The key is designing with failure scenarios in mind and implementing comprehensive monitoring from day one.&lt;/p&gt;

&lt;p&gt;Want to dive deeper into any specific aspect of this architecture? Feel free to reach out—I’m always happy to discuss distributed systems design!&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Jun 2025 07:00:00 -0300</pubDate>
        <link>http://matheus-vieira.github.io/blog/en-us/dotnet-and-azure-foundations/rabbitmq-handling-high-volumes-without-losing-control/</link>
        <guid isPermaLink="true">http://matheus-vieira.github.io/blog/en-us/dotnet-and-azure-foundations/rabbitmq-handling-high-volumes-without-losing-control/</guid>
        
        <category>rabbitmq</category>
        
        <category>messaging</category>
        
        <category>dotnet</category>
        
        <category>distributed-systems</category>
        
        <category>architecture</category>
        
        <category>azure</category>
        
        
        <category>en-us</category>
        
        <category>dotnet-and-azure-foundations</category>
        
      </item>
    
      <item>
        <title>RabbitMQ: Gerenciando Alto Volume sem Perder o Controle</title>
        <description>&lt;p&gt;Quando você está desenvolvendo sistemas backend que precisam processar milhares ou milhões de mensagens diariamente, ter uma infraestrutura de mensageria robusta torna-se crítica. Na minha experiência arquitetando sistemas distribuídos para plataformas financeiras e de e-commerce, o RabbitMQ provou ser uma ferramenta confiável para gerenciar processamento de mensagens de alto volume sem perder o controle sobre a confiabilidade do sistema.&lt;/p&gt;

&lt;p&gt;Vou compartilhar uma arquitetura real e implementação prática que processou com sucesso picos de carga de mais de 100.000 mensagens por minuto em produção.&lt;/p&gt;

&lt;h2 id=&quot;️-a-arquitetura-processamento-de-transações-financeiras&quot;&gt;🏗️ A Arquitetura: Processamento de Transações Financeiras&lt;/h2&gt;

&lt;p&gt;Aqui está um diagrama simplificado de um sistema de processamento de transações financeiras que implementei:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[Web API] → [RabbitMQ Exchange] → [Múltiplas Filas] → [Worker Services]
    ↓              ↓                    ↓               ↓
[Validação]   [Roteamento]         [Buffer]        [Processamento]
    ↓              ↓                    ↓               ↓
[Database]     [Dead Letter]      [Retry Logic]   [Notificações]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Componentes Principais:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Topic Exchange&lt;/strong&gt;: Roteia mensagens baseado no tipo e prioridade da transação&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Filas Duráveis&lt;/strong&gt;: Garante persistência de mensagens durante reinicializações&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Múltiplos Worker Services&lt;/strong&gt;: Escalabilidade horizontal para capacidade de processamento&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dead Letter Queues&lt;/strong&gt;: Trata mensagens com falha graciosamente&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Circuit Breakers&lt;/strong&gt;: Previne falhas em cascata&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-implementação-worker-services-net-core&quot;&gt;🚀 Implementação: Worker Services .NET Core&lt;/h2&gt;

&lt;p&gt;Aqui está como implemento os componentes principais:&lt;/p&gt;

&lt;h3 id=&quot;1-publisher-de-mensagens-web-api&quot;&gt;1. Publisher de Mensagens (Web API)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class TransactionPublisher
{
    private readonly IConnection _connection;
    private readonly IModel _channel;
    
    public TransactionPublisher(IConfiguration config)
    {
        var factory = new ConnectionFactory()
        {
            HostName = config[&quot;RabbitMQ:Host&quot;],
            Port = config.GetValue&amp;lt;int&amp;gt;(&quot;RabbitMQ:Port&quot;),
            UserName = config[&quot;RabbitMQ:Username&quot;],
            Password = config[&quot;RabbitMQ:Password&quot;],
            VirtualHost = config[&quot;RabbitMQ:VirtualHost&quot;]
        };
        
        _connection = factory.CreateConnection();
        _channel = _connection.CreateModel();
        
        // Declarar exchange
        _channel.ExchangeDeclare(
            exchange: &quot;transactions.topic&quot;,
            type: ExchangeType.Topic,
            durable: true
        );
    }

    public async Task PublishTransactionAsync(TransactionRequest transaction)
    {
        var routingKey = $&quot;transaction.{transaction.Type}.{transaction.Priority}&quot;;
        var message = JsonSerializer.Serialize(transaction);
        var body = Encoding.UTF8.GetBytes(message);

        var properties = _channel.CreateBasicProperties();
        properties.Persistent = true; // Mensagem sobrevive a restart do broker
        properties.MessageId = Guid.NewGuid().ToString();
        properties.Timestamp = new AmqpTimestamp(DateTimeOffset.UtcNow.ToUnixTimeSeconds());

        _channel.BasicPublish(
            exchange: &quot;transactions.topic&quot;,
            routingKey: routingKey,
            basicProperties: properties,
            body: body
        );

        // Opcional: Confirmar publicação
        _channel.WaitForConfirmsOrDie(TimeSpan.FromSeconds(5));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;2-configuração-de-filas&quot;&gt;2. Configuração de Filas&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class QueueConfiguration
{
    public static void ConfigureQueues(IModel channel)
    {
        // Fila de transações de alta prioridade
        var highPriorityArgs = new Dictionary&amp;lt;string, object&amp;gt;
        {
            {&quot;x-message-ttl&quot;, 300000}, // TTL de 5 minutos
            {&quot;x-dead-letter-exchange&quot;, &quot;transactions.dlx&quot;},
            {&quot;x-dead-letter-routing-key&quot;, &quot;high-priority.failed&quot;},
            {&quot;x-max-retries&quot;, 3}
        };

        channel.QueueDeclare(
            queue: &quot;transactions.high-priority&quot;,
            durable: true,
            exclusive: false,
            autoDelete: false,
            arguments: highPriorityArgs
        );

        // Fila de transações de prioridade normal
        var normalPriorityArgs = new Dictionary&amp;lt;string, object&amp;gt;
        {
            {&quot;x-message-ttl&quot;, 600000}, // TTL de 10 minutos
            {&quot;x-dead-letter-exchange&quot;, &quot;transactions.dlx&quot;},
            {&quot;x-dead-letter-routing-key&quot;, &quot;normal.failed&quot;},
            {&quot;x-max-retries&quot;, 5}
        };

        channel.QueueDeclare(
            queue: &quot;transactions.normal-priority&quot;,
            durable: true,
            exclusive: false,
            autoDelete: false,
            arguments: normalPriorityArgs
        );

        // Vincular filas ao exchange
        channel.QueueBind(&quot;transactions.high-priority&quot;, &quot;transactions.topic&quot;, &quot;transaction.*.high&quot;);
        channel.QueueBind(&quot;transactions.normal-priority&quot;, &quot;transactions.topic&quot;, &quot;transaction.*.normal&quot;);
        channel.QueueBind(&quot;transactions.normal-priority&quot;, &quot;transactions.topic&quot;, &quot;transaction.*.low&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;3-consumer-de-alta-performance&quot;&gt;3. Consumer de Alta Performance&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class TransactionWorkerService : BackgroundService
{
    private readonly ILogger&amp;lt;TransactionWorkerService&amp;gt; _logger;
    private readonly IServiceProvider _serviceProvider;
    private IConnection _connection;
    private IModel _channel;
    private readonly SemaphoreSlim _semaphore;

    public TransactionWorkerService(
        ILogger&amp;lt;TransactionWorkerService&amp;gt; logger,
        IServiceProvider serviceProvider)
    {
        _logger = logger;
        _serviceProvider = serviceProvider;
        _semaphore = new SemaphoreSlim(Environment.ProcessorCount * 2); // Limita processamento concorrente
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        InitializeRabbitMQ();

        var consumer = new AsyncEventingBasicConsumer(_channel);
        consumer.Received += async (model, ea) =&amp;gt;
        {
            await _semaphore.WaitAsync(stoppingToken);
            
            try
            {
                await ProcessMessageAsync(ea);
                _channel.BasicAck(ea.DeliveryTag, false);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, &quot;Erro processando mensagem {MessageId}&quot;, ea.BasicProperties.MessageId);
                
                // Implementar lógica de retry
                var shouldRetry = ShouldRetry(ea);
                // se shouldRetry true -&amp;gt; Reenviar
                // se shouldRetry false -&amp;gt; Enviar para DLQ
                _channel.BasicNack(ea.DeliveryTag, false, shouldRetry);
                _channel.BasicNack(ea.DeliveryTag, false, shouldRetry);
            }
            finally
            {
                _semaphore.Release();
            }
        };

        _channel.BasicConsume(
            queue: &quot;transactions.high-priority&quot;,
            autoAck: false, // Acknowledgment manual para confiabilidade
            consumer: consumer
        );

        // Manter o serviço rodando
        while (!stoppingToken.IsCancellationRequested)
        {
            await Task.Delay(1000, stoppingToken);
        }
    }

    private async Task ProcessMessageAsync(BasicDeliverEventArgs ea)
    {
        using var scope = _serviceProvider.CreateScope();
        var processor = scope.ServiceProvider.GetRequiredService&amp;lt;ITransactionProcessor&amp;gt;();
        
        var body = ea.Body.ToArray();
        var message = Encoding.UTF8.GetString(body);
        var transaction = JsonSerializer.Deserialize&amp;lt;TransactionRequest&amp;gt;(message);

        await processor.ProcessAsync(transaction);
    }

    private bool ShouldRetry(BasicDeliverEventArgs ea)
    {
        // Verificar contagem de retry dos headers
        var retryCount = ea.BasicProperties.Headers?.ContainsKey(&quot;x-retry-count&quot;) == true
            ? (int)ea.BasicProperties.Headers[&quot;x-retry-count&quot;]
            : 0;

        return retryCount &amp;lt; 3;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-monitoramento-e-observabilidade&quot;&gt;📊 Monitoramento e Observabilidade&lt;/h2&gt;

&lt;p&gt;Monitorar sistemas de alto volume é crucial. Assim implemento observabilidade abrangente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class RabbitMQMetrics
{
    private readonly ILogger&amp;lt;RabbitMQMetrics&amp;gt; _logger;
    private readonly IMetrics _metrics;

    public void RecordMessagePublished(string queueName)
    {
        _metrics.Measure.Counter.Increment(&quot;rabbitmq.messages.published&quot;, 
            new MetricTags(&quot;queue&quot;, queueName));
    }

    public void RecordMessageProcessed(string queueName, TimeSpan processingTime)
    {
        _metrics.Measure.Counter.Increment(&quot;rabbitmq.messages.processed&quot;,
            new MetricTags(&quot;queue&quot;, queueName));
        
        _metrics.Measure.Timer.Time(&quot;rabbitmq.processing.duration&quot;,
            processingTime, new MetricTags(&quot;queue&quot;, queueName));
    }

    public void RecordMessageFailed(string queueName, string errorType)
    {
        _metrics.Measure.Counter.Increment(&quot;rabbitmq.messages.failed&quot;,
            new MetricTags(&quot;queue&quot;, queueName, &quot;error_type&quot;, errorType));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;️-melhores-práticas-para-processamento-de-alto-volume&quot;&gt;🛡️ Melhores Práticas para Processamento de Alto Volume&lt;/h2&gt;

&lt;h3 id=&quot;1-gerenciamento-de-conexões&quot;&gt;1. Gerenciamento de Conexões&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;// Use pool de conexões para cenários de alto throughput
public class RabbitMQConnectionPool
{
    private readonly ConcurrentQueue&amp;lt;IConnection&amp;gt; _connections = new();
    private readonly SemaphoreSlim _semaphore;

    public async Task&amp;lt;IConnection&amp;gt; GetConnectionAsync()
    {
        await _semaphore.WaitAsync();
        
        if (_connections.TryDequeue(out var connection) &amp;amp;&amp;amp; connection.IsOpen)
        {
            return connection;
        }

        return CreateNewConnection();
    }

    public void ReturnConnection(IConnection connection)
    {
        if (connection.IsOpen)
        {
            _connections.Enqueue(connection);
        }
        
        _semaphore.Release();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;2-processamento-em-lote&quot;&gt;2. Processamento em Lote&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class BatchTransactionProcessor
{
    private readonly List&amp;lt;TransactionRequest&amp;gt; _batch = new();
    private readonly Timer _flushTimer;

    public async Task AddToBatchAsync(TransactionRequest transaction)
    {
        lock (_batch)
        {
            _batch.Add(transaction);
            
            if (_batch.Count &amp;gt;= 100) // Tamanho do lote
            {
                _ = Task.Run(FlushBatchAsync);
            }
        }
    }

    private async Task FlushBatchAsync()
    {
        List&amp;lt;TransactionRequest&amp;gt; currentBatch;
        
        lock (_batch)
        {
            currentBatch = new List&amp;lt;TransactionRequest&amp;gt;(_batch);
            _batch.Clear();
        }

        if (currentBatch.Any())
        {
            await ProcessBatchAsync(currentBatch);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-configuração-para-produção&quot;&gt;🔧 Configuração para Produção&lt;/h2&gt;

&lt;h3 id=&quot;configuração-do-rabbitmq&quot;&gt;Configuração do RabbitMQ&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;RabbitMQ&quot;: {
    &quot;Host&quot;: &quot;localhost&quot;,
    &quot;Port&quot;: 5672,
    &quot;Username&quot;: &quot;guest&quot;,
    &quot;Password&quot;: &quot;guest&quot;,
    &quot;VirtualHost&quot;: &quot;/&quot;,
    &quot;ConnectionPoolSize&quot;: 10,
    &quot;ChannelPoolSize&quot;: 50,
    &quot;PrefetchCount&quot;: 100,
    &quot;ConfirmSelect&quot;: true,
    &quot;Heartbeat&quot;: 60
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;escalabilidade-do-worker-service&quot;&gt;Escalabilidade do Worker Service&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Docker Compose para escalonamento horizontal
version: &apos;3.8&apos;
services:
  transaction-worker:
    image: transaction-worker:latest
    scale: 5  # Múltiplas instâncias
    environment:
      - RABBITMQ_HOST=rabbitmq
      - WORKER_CONCURRENCY=10
    depends_on:
      - rabbitmq
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-resultados-e-benefícios&quot;&gt;📈 Resultados e Benefícios&lt;/h2&gt;

&lt;p&gt;Em produção, esta arquitetura entregou:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Throughput&lt;/strong&gt;: Mais de 100.000 mensagens/minuto durante picos de carga&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Latência&lt;/strong&gt;: Tempo médio de processamento abaixo de 50ms&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Confiabilidade&lt;/strong&gt;: Taxa de sucesso de entrega de mensagens de 99,9%&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Escalabilidade&lt;/strong&gt;: Escalamento linear adicionando instâncias de worker&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Observabilidade&lt;/strong&gt;: Visibilidade completa do fluxo de mensagens e saúde do sistema&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-principais-aprendizados&quot;&gt;🎯 Principais Aprendizados&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Projete para Falhas&lt;/strong&gt;: Sempre implemente dead letter queues e mecanismos de retry&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Monitore Tudo&lt;/strong&gt;: Acompanhe fluxo de mensagens, tempos de processamento e taxas de erro&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Escale Horizontalmente&lt;/strong&gt;: Use múltiplas instâncias de worker ao invés de aumentar capacidade de instância única&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use Lotes Quando Possível&lt;/strong&gt;: Agrupe operações para melhorar eficiência de banco de dados e APIs externas&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Teste Sob Carga&lt;/strong&gt;: Use ferramentas como NBomber ou Artillery para validar sua arquitetura&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A robustez do RabbitMQ combinada com a performance do .NET torna esta uma excelente escolha para construir sistemas de mensageria confiáveis e de alto volume. A chave é projetar considerando cenários de falha e implementar monitoramento abrangente desde o primeiro dia.&lt;/p&gt;

&lt;p&gt;Quer se aprofundar em algum aspecto específico desta arquitetura? Fique à vontade para entrar em contato—sempre fico feliz em discutir design de sistemas distribuídos!&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Jun 2025 07:00:00 -0300</pubDate>
        <link>http://matheus-vieira.github.io/blog/pt-br/dotnet-e-fundamentos-azure/rabbitmq-gerenciando-alto-volume-sem-perder-controle/</link>
        <guid isPermaLink="true">http://matheus-vieira.github.io/blog/pt-br/dotnet-e-fundamentos-azure/rabbitmq-gerenciando-alto-volume-sem-perder-controle/</guid>
        
        <category>rabbitmq</category>
        
        <category>messaging</category>
        
        <category>dotnet</category>
        
        <category>sistemas-distribuidos</category>
        
        <category>arquitetura</category>
        
        <category>azure</category>
        
        
        <category>pt-br</category>
        
        <category>dotnet-e-fundamentos-azure</category>
        
      </item>
    
      <item>
        <title>Perguntas e respostas para entrevistas (2025)</title>
        <description>&lt;p&gt;Um compilado com 160 questões cuidadosamente selecionadas para ajudar candidatos a se prepararem de forma mais eficiente para entrevistas técnicas em tecnologia.&lt;/p&gt;

&lt;p&gt;Este material reúne perguntas com tags que indicam o assunto principal de cada questão, facilitando a navegação e o estudo direcionado. O foco deste questionário está em temas essenciais para profissionais modernos, incluindo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Azure&lt;/strong&gt;: Arquitetura, gerenciamento de recursos, segurança e melhores práticas na nuvem Microsoft.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DevOps&lt;/strong&gt;: Integração contínua, entrega contínua, automação, pipelines e cultura DevOps.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IaC (Infrastructure as Code)&lt;/strong&gt;: Princípios, ferramentas (como ARM, Bicep, Terraform), versionamento e governança de infraestrutura.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dx (Developer Experience)&lt;/strong&gt;: Práticas para melhorar a produtividade, experiência do desenvolvedor, automação de ambientes e qualidade de código.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cada pergunta é acompanhada de explicações detalhadas, exemplos práticos e dicas para ajudar no entendimento dos conceitos e na preparação para entrevistas reais.&lt;/p&gt;

&lt;p&gt;Aproveite para revisar, praticar e aprofundar seus conhecimentos nos temas mais cobrados em processos seletivos de tecnologia!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;label&gt;&lt;strong&gt;Filtrar por tags:&lt;/strong&gt;&lt;/label&gt;&lt;/p&gt;

&lt;ul id=&quot;tagFilter&quot; style=&quot;list-style:none; padding:0; margin:0 0 1em 0; columns: 2; -webkit-columns: 2; -moz-columns: 2;&quot;&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;.NET&quot; /&gt; .NET
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;ACA&quot; /&gt; ACA
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;AKS&quot; /&gt; AKS
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;API Management&quot; /&gt; API Management
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Access Control&quot; /&gt; Access Control
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Alerting&quot; /&gt; Alerting
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;App Registrations&quot; /&gt; App Registrations
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;App Service&quot; /&gt; App Service
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Architecture Patterns&quot; /&gt; Architecture Patterns
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Armazenamento&quot; /&gt; Armazenamento
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Arquitetura&quot; /&gt; Arquitetura
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Authentication&quot; /&gt; Authentication
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Automation&quot; /&gt; Automation
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Automação&quot; /&gt; Automação
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Autoscaling&quot; /&gt; Autoscaling
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Azure&quot; /&gt; Azure
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Azure Basics&quot; /&gt; Azure Basics
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Azure Storage&quot; /&gt; Azure Storage
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Backup&quot; /&gt; Backup
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Bicep&quot; /&gt; Bicep
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;CDN&quot; /&gt; CDN
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;CI/CD&quot; /&gt; CI/CD
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;CLI&quot; /&gt; CLI
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Cloud&quot; /&gt; Cloud
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Colaboração&quot; /&gt; Colaboração
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Collaboration&quot; /&gt; Collaboration
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Communication&quot; /&gt; Communication
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Comparativo&quot; /&gt; Comparativo
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Compliance&quot; /&gt; Compliance
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Conditional Access&quot; /&gt; Conditional Access
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Consistency&quot; /&gt; Consistency
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Containers&quot; /&gt; Containers
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Controle de Acesso&quot; /&gt; Controle de Acesso
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Cost Management&quot; /&gt; Cost Management
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Cost Model&quot; /&gt; Cost Model
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Cultura&quot; /&gt; Cultura
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Custom Roles&quot; /&gt; Custom Roles
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;DX&quot; /&gt; DX
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Data Management&quot; /&gt; Data Management
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Deployment&quot; /&gt; Deployment
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Desenvolvimento&quot; /&gt; Desenvolvimento
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;DevOps&quot; /&gt; DevOps
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;DevSecOps&quot; /&gt; DevSecOps
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Developer Experience&quot; /&gt; Developer Experience
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Diagnostics&quot; /&gt; Diagnostics
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Disaster Recovery&quot; /&gt; Disaster Recovery
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Disponibilidade&quot; /&gt; Disponibilidade
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Economics&quot; /&gt; Economics
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Encryption&quot; /&gt; Encryption
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Enterprise&quot; /&gt; Enterprise
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Entrega Contínua&quot; /&gt; Entrega Contínua
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Environment&quot; /&gt; Environment
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Environment Strategies&quot; /&gt; Environment Strategies
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Escalabilidade&quot; /&gt; Escalabilidade
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Estratégias&quot; /&gt; Estratégias
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Event Grid&quot; /&gt; Event Grid
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Event Hub&quot; /&gt; Event Hub
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Event Streaming&quot; /&gt; Event Streaming
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Event-Driven&quot; /&gt; Event-Driven
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;FinOps&quot; /&gt; FinOps
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Function App&quot; /&gt; Function App
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;GitHub&quot; /&gt; GitHub
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;GitHub Actions&quot; /&gt; GitHub Actions
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;GitOps&quot; /&gt; GitOps
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Governance&quot; /&gt; Governance
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Governança&quot; /&gt; Governança
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;IaC&quot; /&gt; IaC
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;IaaS&quot; /&gt; IaaS
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Identidade&quot; /&gt; Identidade
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Identity&quot; /&gt; Identity
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Infrastructure&quot; /&gt; Infrastructure
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Integration&quot; /&gt; Integration
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Integração&quot; /&gt; Integração
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Isolamento&quot; /&gt; Isolamento
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Just-in-Time&quot; /&gt; Just-in-Time
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Lifecycle&quot; /&gt; Lifecycle
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Managed Identity&quot; /&gt; Managed Identity
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Matrix Strategy&quot; /&gt; Matrix Strategy
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Mensageria&quot; /&gt; Mensageria
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Messaging&quot; /&gt; Messaging
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Microservices&quot; /&gt; Microservices
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Migration&quot; /&gt; Migration
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Modelos de Serviço&quot; /&gt; Modelos de Serviço
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Monitoramento&quot; /&gt; Monitoramento
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Monitoring&quot; /&gt; Monitoring
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Multi-cloud&quot; /&gt; Multi-cloud
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Naming Convention&quot; /&gt; Naming Convention
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;OAuth&quot; /&gt; OAuth
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Observabilidade&quot; /&gt; Observabilidade
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Observability&quot; /&gt; Observability
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Optimization&quot; /&gt; Optimization
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Organization&quot; /&gt; Organization
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Orquestração&quot; /&gt; Orquestração
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Otimização&quot; /&gt; Otimização
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;PIM&quot; /&gt; PIM
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;PaaS&quot; /&gt; PaaS
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Performance&quot; /&gt; Performance
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Pipelines&quot; /&gt; Pipelines
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Planning&quot; /&gt; Planning
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Policy&quot; /&gt; Policy
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;PowerShell&quot; /&gt; PowerShell
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Productivity&quot; /&gt; Productivity
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Produtividade&quot; /&gt; Produtividade
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Provisionamento&quot; /&gt; Provisionamento
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Quality&quot; /&gt; Quality
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Quality Gates&quot; /&gt; Quality Gates
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;RBAC&quot; /&gt; RBAC
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;REST API&quot; /&gt; REST API
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;ROI&quot; /&gt; ROI
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Reservations&quot; /&gt; Reservations
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Resiliência&quot; /&gt; Resiliência
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Resource Management&quot; /&gt; Resource Management
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;SDK&quot; /&gt; SDK
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;SIEM&quot; /&gt; SIEM
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;SRE&quot; /&gt; SRE
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;SaaS&quot; /&gt; SaaS
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Scaling&quot; /&gt; Scaling
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Scaling Patterns&quot; /&gt; Scaling Patterns
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Scripting&quot; /&gt; Scripting
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Security&quot; /&gt; Security
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Segurança&quot; /&gt; Segurança
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Serverless&quot; /&gt; Serverless
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Service Bus&quot; /&gt; Service Bus
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Service Mesh&quot; /&gt; Service Mesh
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Slots&quot; /&gt; Slots
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Storage&quot; /&gt; Storage
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Strategy&quot; /&gt; Strategy
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;TCO&quot; /&gt; TCO
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Tagging&quot; /&gt; Tagging
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Tags&quot; /&gt; Tags
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Telemetria&quot; /&gt; Telemetria
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Terraform&quot; /&gt; Terraform
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Testing&quot; /&gt; Testing
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Threat Intelligence&quot; /&gt; Threat Intelligence
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Tooling&quot; /&gt; Tooling
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Validation&quot; /&gt; Validation
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;Zero Trust&quot; /&gt; Zero Trust
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;arm&quot; /&gt; arm
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;azure&quot; /&gt; azure
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;behavioral&quot; /&gt; behavioral
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;behavioral-patterns&quot; /&gt; behavioral-patterns
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;bicep&quot; /&gt; bicep
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;cloud&quot; /&gt; cloud
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;comparison&quot; /&gt; comparison
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;composition&quot; /&gt; composition
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;database&quot; /&gt; database
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;decorator&quot; /&gt; decorator
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;design-patterns&quot; /&gt; design-patterns
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;devops&quot; /&gt; devops
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;events&quot; /&gt; events
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;extensibility&quot; /&gt; extensibility
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;features&quot; /&gt; features
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;gof&quot; /&gt; gof
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;iac&quot; /&gt; iac
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;infrastructure-as-code&quot; /&gt; infrastructure-as-code
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;licensing&quot; /&gt; licensing
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;notifications&quot; /&gt; notifications
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;observer&quot; /&gt; observer
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;offline&quot; /&gt; offline
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;oop&quot; /&gt; oop
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;performance&quot; /&gt; performance
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;postgresql&quot; /&gt; postgresql
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;progressive-web-apps&quot; /&gt; progressive-web-apps
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;provisioning&quot; /&gt; provisioning
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;push-notifications&quot; /&gt; push-notifications
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;pwa&quot; /&gt; pwa
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;rdbms&quot; /&gt; rdbms
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;service-worker&quot; /&gt; service-worker
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;sql-server&quot; /&gt; sql-server
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;structural-patterns&quot; /&gt; structural-patterns
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;thread-safety&quot; /&gt; thread-safety
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;web-development&quot; /&gt; web-development
    &lt;/label&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;label&gt;
      &lt;input type=&quot;checkbox&quot; value=&quot;web-manifest&quot; /&gt; web-manifest
    &lt;/label&gt;
  &lt;/li&gt;
  
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ol id=&quot;questionsList&quot;&gt;
  
  
  &lt;li data-tags=&quot;Azure, DevOps, Environment Strategies, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/2/&quot;&gt;Describe in detail um key concept about Environment Strategies relevant to architecture in Azure &lt;small&gt;[Azure, DevOps, Environment Strategies, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, DevOps, Resource Management, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/1/&quot;&gt;Describe in detail um key concept about Resource Management relevant to architecture in Azure &lt;small&gt;[Azure, DevOps, Resource Management, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, Resource Management, RBAC, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/3/&quot;&gt;Describe in detail um key concept about Resource Management relevant to architecture in Azure &lt;small&gt;[Azure, Resource Management, RBAC, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, DX, Developer Experience, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/4/&quot;&gt;Describe in detail um key concept about DX relevant to architecture in Azure &lt;small&gt;[Azure, DX, Developer Experience, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, Authentication, Managed Identity, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/5/&quot;&gt;Describe in detail um key concept about Authentication relevant to architecture in Azure &lt;small&gt;[Azure, Authentication, Managed Identity, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, Security, Encryption, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/6/&quot;&gt;Describe in detail um key concept about Security relevant to architecture in Azure &lt;small&gt;[Azure, Security, Encryption, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, GitHub Actions, CI/CD, DevOps, Cloud, GitHub&quot;&gt;
    &lt;a href=&quot;/interview_questions/7/&quot;&gt;Descreva How construir um pipeline de CI/CD using GitHub Actions for deploy em Azure &lt;small&gt;[Azure, GitHub Actions, CI/CD, DevOps, Cloud, GitHub]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, App Service, Function App, Autoscaling, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/8/&quot;&gt;Describe in detail um key concept about App Service &amp;amp; Function App relevant to architecture in Azure &lt;small&gt;[Azure, App Service, Function App, Autoscaling, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, CLI, Automation, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/9/&quot;&gt;Describe in detail um key concept about CLI withmands relevant to architecture in Azure &lt;small&gt;[Azure, CLI, Automation, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, GitHub Actions, CI/CD, DevOps&quot;&gt;
    &lt;a href=&quot;/interview_questions/10/&quot;&gt;Descreva How construir um pipeline de CI/CD using GitHub Actions for deploy em Azure &lt;small&gt;[Azure, GitHub Actions, CI/CD, DevOps]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, .NET, SDK&quot;&gt;
    &lt;a href=&quot;/interview_questions/11/&quot;&gt;Describe in detail um key concept about .NET + Azure relevant to architecture in Azure &lt;small&gt;[Azure, .NET, SDK]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, Managed Identity, Security&quot;&gt;
    &lt;a href=&quot;/interview_questions/12/&quot;&gt;What is Managed Identity no Azure e Which sua importância for security? &lt;small&gt;[Azure, Managed Identity, Security]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, Environment Strategies, Naming Convention, Tagging&quot;&gt;
    &lt;a href=&quot;/interview_questions/13/&quot;&gt;Describe in detail um key concept about Environment Strategies relevant to architecture in Azure &lt;small&gt;[Azure, Environment Strategies, Naming Convention, Tagging]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, CLI, Automação, DevOps&quot;&gt;
    &lt;a href=&quot;/interview_questions/14/&quot;&gt;Describe in detail um key concept about CLI withmands relevant to architecture in Azure &lt;small&gt;[Azure, CLI, Automação, DevOps]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, RBAC, Segurança, Governança&quot;&gt;
    &lt;a href=&quot;/interview_questions/15/&quot;&gt;Describe in detail um key concept about RBAC relevant to architecture in Azure &lt;small&gt;[Azure, RBAC, Segurança, Governança]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, Storage, Resiliência, Disponibilidade&quot;&gt;
    &lt;a href=&quot;/interview_questions/16/&quot;&gt;Describe in detail um key concept about Azure Storage relevant to architecture in Azure &lt;small&gt;[Azure, Storage, Resiliência, Disponibilidade]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, Cost Management, FinOps, Governança&quot;&gt;
    &lt;a href=&quot;/interview_questions/17/&quot;&gt;Describe in detail um key concept about Cost Management relevant to architecture in Azure &lt;small&gt;[Azure, Cost Management, FinOps, Governança]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, Messaging, Event-Driven, Integração&quot;&gt;
    &lt;a href=&quot;/interview_questions/18/&quot;&gt;withpare Azure Service Bus e Event Hub. When utilizar each one? &lt;small&gt;[Azure, Messaging, Event-Driven, Integração]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, Messaging, Event-Driven, Integração&quot;&gt;
    &lt;a href=&quot;/interview_questions/19/&quot;&gt;withpare Azure Service Bus e Event Hub. When utilizar each one? (2) &lt;small&gt;[Azure, Messaging, Event-Driven, Integração]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, CI/CD, DevOps, Automação&quot;&gt;
    &lt;a href=&quot;/interview_questions/20/&quot;&gt;Describe in detail um key concept about CI/CD pipelines relevant to architecture in Azure &lt;small&gt;[Azure, CI/CD, DevOps, Automação]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;DX, Azure, Arquitetura&quot;&gt;
    &lt;a href=&quot;/interview_questions/21/&quot;&gt;[DX] - Describe in detail um key concept about DX relevant to architecture in Azure &lt;small&gt;[DX, Azure, Arquitetura]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure Storage, Azure, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/22/&quot;&gt;Describe in detail um key concept about Azure Storage relevant to architecture in Azure &lt;small&gt;[Azure Storage, Azure, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Managed Identity, Azure, Arquitetura, Segurança, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/23/&quot;&gt;Describe in detail um key concept about Managed Identity relevant to architecture in Azure &lt;small&gt;[Managed Identity, Azure, Arquitetura, Segurança, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Microservices, Azure, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/24/&quot;&gt;Describe in detail um key concept about Microservices relevant to architecture in Azure. &lt;small&gt;[Microservices, Azure, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Monitoring, Azure, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/25/&quot;&gt;Describe in detail um key concept about Monitoring relevant to architecture in Azure. &lt;small&gt;[Monitoring, Azure, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;App Service, Function App, Azure, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/26/&quot;&gt;Describe in detail um key concept about App Service &amp;amp; Function App relevant to architecture in Azure &lt;small&gt;[App Service, Function App, Azure, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Security, Azure, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/27/&quot;&gt;Describe in detail um key concept about Security relevant to architecture in Azure &lt;small&gt;[Security, Azure, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Microservices, Azure, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/28/&quot;&gt;Describe in detail um key concept about Microservices relevant to architecture in Azure &lt;small&gt;[Microservices, Azure, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Microservices, Azure, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/29/&quot;&gt;Describe in detail um key concept about Microservices relevant to architecture in Azure &lt;small&gt;[Microservices, Azure, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Service Bus, Event Hub, Azure, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/30/&quot;&gt;withpare Azure Service Bus e Event Hub. When utilizar each one? &lt;small&gt;[Service Bus, Event Hub, Azure, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Bicep, IaC, Azure, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/31/&quot;&gt;How você usaria Bicep for provisionar um environment no Azure? Which as advantages dessa abordagem? &lt;small&gt;[Bicep, IaC, Azure, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Security, Azure, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/32/&quot;&gt;Describe in detail um key concept about Security relevant to architecture in Azure &lt;small&gt;[Security, Azure, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;AKS, ACA, Azure, Containers, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/33/&quot;&gt;Explique as main diferenças between Azure Kubernetes Service (AKS) e Azure Container Apps (ACA) &lt;small&gt;[AKS, ACA, Azure, Containers, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Authentication, Azure, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/34/&quot;&gt;Describe in detail um key concept about Authentication relevant to architecture in Azure &lt;small&gt;[Authentication, Azure, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Developer Experience, DX, Azure, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/35/&quot;&gt;Describe in detail um key concept about Developer Experience relevant to architecture in Azure &lt;small&gt;[Developer Experience, DX, Azure, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;DevOps, Azure, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/36/&quot;&gt;Describe in detail um key concept about DevOps relevant to architecture in Azure &lt;small&gt;[DevOps, Azure, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;DX, Azure, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/37/&quot;&gt;Describe in detail um key concept about DX relevant to architecture in Azure &lt;small&gt;[DX, Azure, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Monitoring, Azure, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/38/&quot;&gt;Describe in detail um key concept about Monitoring relevant to architecture in Azure &lt;small&gt;[Monitoring, Azure, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Terraform, Bicep, IaC, Azure, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/39/&quot;&gt;Describe in detail um key concept about Terraform vs Bicep relevant to architecture in Azure &lt;small&gt;[Terraform, Bicep, IaC, Azure, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;GitHub Actions, CI/CD, Azure, DevOps, Arquitetura, Cloud, GitHub&quot;&gt;
    &lt;a href=&quot;/interview_questions/40/&quot;&gt;Descreva How construir um pipeline de CI/CD using GitHub Actions for deploy em Azure &lt;small&gt;[GitHub Actions, CI/CD, Azure, DevOps, Arquitetura, Cloud, GitHub]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;DevOps, Azure, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/41/&quot;&gt;Describe in detail um key concept about DevOps relevant to architecture in Azure &lt;small&gt;[DevOps, Azure, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Service Bus, Event Hub, Azure, Arquitetura, Cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/42/&quot;&gt;withpare Azure Service Bus e Event Hub. When utilizar each one? (2) &lt;small&gt;[Service Bus, Event Hub, Azure, Arquitetura, Cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, IaC, Bicep, Cloud, Provisionamento, DevOps&quot;&gt;
    &lt;a href=&quot;/interview_questions/43/&quot;&gt;How você usaria Bicep for provisionar um environment no Azure? Which as advantages dessa abordagem? &lt;small&gt;[Azure, IaC, Bicep, Cloud, Provisionamento, DevOps]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, Security, Cloud, Segurança, Arquitetura&quot;&gt;
    &lt;a href=&quot;/interview_questions/44/&quot;&gt;Describe in detail um key concept about Security relevant to architecture in Azure. &lt;small&gt;[Azure, Security, Cloud, Segurança, Arquitetura]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, IaC, Terraform, Bicep, Cloud, DevOps, Comparativo&quot;&gt;
    &lt;a href=&quot;/interview_questions/45/&quot;&gt;Describe in detail um key concept about Terraform vs Bicep relevant to architecture in Azure. &lt;small&gt;[Azure, IaC, Terraform, Bicep, Cloud, DevOps, Comparativo]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, Monitoring, Observability, Cloud, DevOps&quot;&gt;
    &lt;a href=&quot;/interview_questions/46/&quot;&gt;Describe in detail um key concept about Monitoring relevant to architecture in Azure. &lt;small&gt;[Azure, Monitoring, Observability, Cloud, DevOps]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, IaC, Terraform, Bicep, Cloud, DevOps, Comparativo&quot;&gt;
    &lt;a href=&quot;/interview_questions/47/&quot;&gt;Describe in detail um key concept about Terraform vs Bicep relevant to architecture in Azure. &lt;small&gt;[Azure, IaC, Terraform, Bicep, Cloud, DevOps, Comparativo]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, Environment, Estratégias, Cloud, DevOps, Governança&quot;&gt;
    &lt;a href=&quot;/interview_questions/48/&quot;&gt;Describe in detail um key concept about Environment Strategies relevant to architecture in Azure. &lt;small&gt;[Azure, Environment, Estratégias, Cloud, DevOps, Governança]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, Cloud, IaaS, PaaS, SaaS, Modelos de Serviço&quot;&gt;
    &lt;a href=&quot;/interview_questions/49/&quot;&gt;Explique os main modelos de services in the cloud (IaaS, PaaS, SaaS) e How o Azure implements each one deles. &lt;small&gt;[Azure, Cloud, IaaS, PaaS, SaaS, Modelos de Serviço]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, Environment, Estratégias, Cloud, DevOps, Governança&quot;&gt;
    &lt;a href=&quot;/interview_questions/50/&quot;&gt;Describe in detail um key concept about Environment Strategies relevant to architecture in Azure. &lt;small&gt;[Azure, Environment, Estratégias, Cloud, DevOps, Governança]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, Monitoring, Observability, Cloud, DevOps&quot;&gt;
    &lt;a href=&quot;/interview_questions/51/&quot;&gt;Describe in detail um key concept about Monitoring relevant to architecture in Azure. &lt;small&gt;[Azure, Monitoring, Observability, Cloud, DevOps]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, Authentication, Segurança, Cloud, Identity, DevSecOps&quot;&gt;
    &lt;a href=&quot;/interview_questions/52/&quot;&gt;Describe in detail um key concept about Authentication relevant to architecture in Azure. &lt;small&gt;[Azure, Authentication, Segurança, Cloud, Identity, DevSecOps]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, Monitoring, Observability, Cloud, DevOps&quot;&gt;
    &lt;a href=&quot;/interview_questions/53/&quot;&gt;Describe in detail um key concept about Monitoring relevant to architecture in Azure. &lt;small&gt;[Azure, Monitoring, Observability, Cloud, DevOps]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, IaC, Bicep, Cloud, Provisionamento, DevOps&quot;&gt;
    &lt;a href=&quot;/interview_questions/54/&quot;&gt;How você usaria Bicep for provisionar um environment no Azure? Which as advantages dessa abordagem? &lt;small&gt;[Azure, IaC, Bicep, Cloud, Provisionamento, DevOps]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure, DevOps, Cloud, CI/CD, Automação, Cultura&quot;&gt;
    &lt;a href=&quot;/interview_questions/55/&quot;&gt;Describe in detail um key concept about DevOps relevant to architecture in Azure. &lt;small&gt;[Azure, DevOps, Cloud, CI/CD, Automação, Cultura]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;.NET, Azure, Cloud, Arquitetura, Integração, Desenvolvimento&quot;&gt;
    &lt;a href=&quot;/interview_questions/56/&quot;&gt;.NET + Azure: key concept relevant to architecture in Azure &lt;small&gt;[.NET, Azure, Cloud, Arquitetura, Integração, Desenvolvimento]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;DX, Developer Experience, Azure, Cloud, Produtividade, Automação&quot;&gt;
    &lt;a href=&quot;/interview_questions/57/&quot;&gt;DX: key concept relevant to architecture in Azure &lt;small&gt;[DX, Developer Experience, Azure, Cloud, Produtividade, Automação]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Developer Experience, DX, Azure, Cloud, Produtividade, Automação&quot;&gt;
    &lt;a href=&quot;/interview_questions/58/&quot;&gt;Developer Experience: key concept relevant to architecture in Azure &lt;small&gt;[Developer Experience, DX, Azure, Cloud, Produtividade, Automação]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Cost Management, Azure, Cloud, FinOps, Governança, Otimização&quot;&gt;
    &lt;a href=&quot;/interview_questions/59/&quot;&gt;Cost Management: key concept relevant to architecture in Azure &lt;small&gt;[Cost Management, Azure, Cloud, FinOps, Governança, Otimização]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Security, Azure, Cloud, Segurança, Governança, Compliance&quot;&gt;
    &lt;a href=&quot;/interview_questions/60/&quot;&gt;Security: key concept relevant to architecture in Azure &lt;small&gt;[Security, Azure, Cloud, Segurança, Governança, Compliance]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Service Bus, Event Hub, Azure, Cloud, Mensageria, Integração&quot;&gt;
    &lt;a href=&quot;/interview_questions/61/&quot;&gt;Service Bus vs Event Hub: When utilizar each one? &lt;small&gt;[Service Bus, Event Hub, Azure, Cloud, Mensageria, Integração]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;App Registrations, Azure, Cloud, Identidade, Segurança, OAuth&quot;&gt;
    &lt;a href=&quot;/interview_questions/62/&quot;&gt;App Registrations: key concept relevant to architecture in Azure &lt;small&gt;[App Registrations, Azure, Cloud, Identidade, Segurança, OAuth]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Service Bus, Event Hub, Azure, Cloud, Mensageria, Integração&quot;&gt;
    &lt;a href=&quot;/interview_questions/63/&quot;&gt;Service Bus vs Event Hub: When utilizar each one? &lt;small&gt;[Service Bus, Event Hub, Azure, Cloud, Mensageria, Integração]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Bicep, IaC, Azure, Cloud, Automação, Governança&quot;&gt;
    &lt;a href=&quot;/interview_questions/64/&quot;&gt;Bicep &amp;amp; IaC: Provisionando environments no Azure e advantages &lt;small&gt;[Bicep, IaC, Azure, Cloud, Automação, Governança]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;CI/CD, Azure, Cloud, DevOps, Automação, Entrega Contínua&quot;&gt;
    &lt;a href=&quot;/interview_questions/65/&quot;&gt;CI/CD pipelines: key concept relevant to architecture in Azure &lt;small&gt;[CI/CD, Azure, Cloud, DevOps, Automação, Entrega Contínua]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Cost Management, Azure, Cloud, FinOps, Governança, Otimização&quot;&gt;
    &lt;a href=&quot;/interview_questions/66/&quot;&gt;Cost Management: key concept relevant to architecture in Azure &lt;small&gt;[Cost Management, Azure, Cloud, FinOps, Governança, Otimização]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;RBAC, Azure, Cloud, Segurança, Governança, Controle de Acesso&quot;&gt;
    &lt;a href=&quot;/interview_questions/67/&quot;&gt;RBAC: key concept relevant to architecture in Azure &lt;small&gt;[RBAC, Azure, Cloud, Segurança, Governança, Controle de Acesso]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;AKS, ACA, Azure, Cloud, Containers, Orquestração&quot;&gt;
    &lt;a href=&quot;/interview_questions/68/&quot;&gt;AKS vs ACA: main diferenças between Azure Kubernetes Service e Azure Container Apps &lt;small&gt;[AKS, ACA, Azure, Cloud, Containers, Orquestração]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Microservices, Azure, Cloud, Arquitetura, Containers, Escalabilidade&quot;&gt;
    &lt;a href=&quot;/interview_questions/69/&quot;&gt;Microservices: key concept relevant to architecture in Azure &lt;small&gt;[Microservices, Azure, Cloud, Arquitetura, Containers, Escalabilidade]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Developer Experience, DX, Azure, Cloud, Produtividade, Automação&quot;&gt;
    &lt;a href=&quot;/interview_questions/70/&quot;&gt;Developer Experience: key concept relevant to architecture in Azure &lt;small&gt;[Developer Experience, DX, Azure, Cloud, Produtividade, Automação]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;AKS, ACA, Azure, Cloud, Containers, Orquestração&quot;&gt;
    &lt;a href=&quot;/interview_questions/71/&quot;&gt;AKS vs ACA: main diferenças between Azure Kubernetes Service e Azure Container Apps &lt;small&gt;[AKS, ACA, Azure, Cloud, Containers, Orquestração]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;GitHub Actions, CI/CD, Azure, Cloud, DevOps, Automação&quot;&gt;
    &lt;a href=&quot;/interview_questions/72/&quot;&gt;GitHub Actions: Pipeline de CI/CD for deploy em Azure &lt;small&gt;[GitHub Actions, CI/CD, Azure, Cloud, DevOps, Automação]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;GitHub Actions, CI/CD, Azure, Cloud, DevOps, Automação&quot;&gt;
    &lt;a href=&quot;/interview_questions/73/&quot;&gt;GitHub Actions: Pipeline de CI/CD for deploy em Azure &lt;small&gt;[GitHub Actions, CI/CD, Azure, Cloud, DevOps, Automação]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;App Registrations, Azure, Cloud, Identidade, Segurança, OAuth&quot;&gt;
    &lt;a href=&quot;/interview_questions/74/&quot;&gt;App Registrations: key concept relevant to architecture in Azure &lt;small&gt;[App Registrations, Azure, Cloud, Identidade, Segurança, OAuth]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Terraform, Bicep, IaC, Azure, Cloud, Automação&quot;&gt;
    &lt;a href=&quot;/interview_questions/75/&quot;&gt;Terraform vs Bicep: key concept relevant to architecture in Azure &lt;small&gt;[Terraform, Bicep, IaC, Azure, Cloud, Automação]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Developer Experience, DX, Azure, Cloud, Produtividade, Automação&quot;&gt;
    &lt;a href=&quot;/interview_questions/76/&quot;&gt;Developer Experience: key concept relevant to architecture in Azure &lt;small&gt;[Developer Experience, DX, Azure, Cloud, Produtividade, Automação]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;App Service, Function App, Azure, Cloud, Serverless, PaaS&quot;&gt;
    &lt;a href=&quot;/interview_questions/77/&quot;&gt;App Service &amp;amp; Function App: key concept relevant to architecture in Azure &lt;small&gt;[App Service, Function App, Azure, Cloud, Serverless, PaaS]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Environment Strategies, Azure, Cloud, Governança, DevOps, Automação&quot;&gt;
    &lt;a href=&quot;/interview_questions/78/&quot;&gt;Environment Strategies: key concept relevant to architecture in Azure &lt;small&gt;[Environment Strategies, Azure, Cloud, Governança, DevOps, Automação]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;AKS, ACA, Azure, Cloud, Containers, Orquestração&quot;&gt;
    &lt;a href=&quot;/interview_questions/79/&quot;&gt;AKS vs ACA: main diferenças between Azure Kubernetes Service e Azure Container Apps &lt;small&gt;[AKS, ACA, Azure, Cloud, Containers, Orquestração]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;App Service, Function App, Azure, Cloud, Serverless, PaaS&quot;&gt;
    &lt;a href=&quot;/interview_questions/80/&quot;&gt;App Service &amp;amp; Function App: key concept relevant to architecture in Azure &lt;small&gt;[App Service, Function App, Azure, Cloud, Serverless, PaaS]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;.NET, Azure, Cloud, Arquitetura, Integração, Desenvolvimento&quot;&gt;
    &lt;a href=&quot;/interview_questions/81/&quot;&gt;.NET + Azure: key concept relevant to architecture in Azure &lt;small&gt;[.NET, Azure, Cloud, Arquitetura, Integração, Desenvolvimento]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Service Bus, Event Hub, Azure, Cloud, Mensageria, Integração&quot;&gt;
    &lt;a href=&quot;/interview_questions/82/&quot;&gt;Service Bus vs Event Hub: When utilizar each one? &lt;small&gt;[Service Bus, Event Hub, Azure, Cloud, Mensageria, Integração]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Authentication, Azure, Cloud, Segurança, Identidade, OAuth&quot;&gt;
    &lt;a href=&quot;/interview_questions/83/&quot;&gt;Authentication: key concept relevant to architecture in Azure &lt;small&gt;[Authentication, Azure, Cloud, Segurança, Identidade, OAuth]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;CLI, Azure, Cloud, Automação, DevOps, Produtividade&quot;&gt;
    &lt;a href=&quot;/interview_questions/84/&quot;&gt;CLI withmands: key concept relevant to architecture in Azure &lt;small&gt;[CLI, Azure, Cloud, Automação, DevOps, Produtividade]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Environment Strategies, Azure, Cloud, Governança, DevOps, Automação&quot;&gt;
    &lt;a href=&quot;/interview_questions/85/&quot;&gt;Environment Strategies: key concept relevant to architecture in Azure &lt;small&gt;[Environment Strategies, Azure, Cloud, Governança, DevOps, Automação]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Resource Management, Azure, Cloud, Governança, Automação, DevOps&quot;&gt;
    &lt;a href=&quot;/interview_questions/86/&quot;&gt;Resource Management: key concept relevant to architecture in Azure &lt;small&gt;[Resource Management, Azure, Cloud, Governança, Automação, DevOps]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Bicep, IaC, Azure, Cloud, Automação, Governança&quot;&gt;
    &lt;a href=&quot;/interview_questions/87/&quot;&gt;Bicep &amp;amp; IaC: Provisionando environments no Azure e advantages &lt;small&gt;[Bicep, IaC, Azure, Cloud, Automação, Governança]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;.NET, Azure, Cloud, Arquitetura, Integração, Desenvolvimento&quot;&gt;
    &lt;a href=&quot;/interview_questions/88/&quot;&gt;.NET + Azure: key concept relevant to architecture in Azure &lt;small&gt;[.NET, Azure, Cloud, Arquitetura, Integração, Desenvolvimento]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure Storage, Azure, Cloud, Armazenamento, Escalabilidade, Segurança&quot;&gt;
    &lt;a href=&quot;/interview_questions/89/&quot;&gt;Azure Storage: key concept relevant to architecture in Azure &lt;small&gt;[Azure Storage, Azure, Cloud, Armazenamento, Escalabilidade, Segurança]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;AKS, ACA, Azure, Cloud, Containers, Orquestração&quot;&gt;
    &lt;a href=&quot;/interview_questions/90/&quot;&gt;AKS vs ACA: main diferenças between Azure Kubernetes Service e Azure Container Apps &lt;small&gt;[AKS, ACA, Azure, Cloud, Containers, Orquestração]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure Storage, Azure, Cloud, Armazenamento, Escalabilidade, Segurança&quot;&gt;
    &lt;a href=&quot;/interview_questions/91/&quot;&gt;Azure Storage: key concept relevant to architecture in Azure &lt;small&gt;[Azure Storage, Azure, Cloud, Armazenamento, Escalabilidade, Segurança]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;.NET, Azure, Cloud, Arquitetura, Integração, Desenvolvimento&quot;&gt;
    &lt;a href=&quot;/interview_questions/92/&quot;&gt;.NET + Azure: key concept relevant to architecture in Azure &lt;small&gt;[.NET, Azure, Cloud, Arquitetura, Integração, Desenvolvimento]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;GitHub Actions, CI/CD, Azure, Cloud, DevOps, Automação&quot;&gt;
    &lt;a href=&quot;/interview_questions/93/&quot;&gt;GitHub Actions: Pipeline de CI/CD for deploy em Azure &lt;small&gt;[GitHub Actions, CI/CD, Azure, Cloud, DevOps, Automação]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;DevOps, Azure, Cloud, Automação, Cultura, Colaboração&quot;&gt;
    &lt;a href=&quot;/interview_questions/94/&quot;&gt;DevOps: key concept relevant to architecture in Azure &lt;small&gt;[DevOps, Azure, Cloud, Automação, Cultura, Colaboração]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;DevOps, Azure, Cloud, Automação, Monitoramento, Observabilidade&quot;&gt;
    &lt;a href=&quot;/interview_questions/95/&quot;&gt;DevOps: key concept relevant to architecture in Azure &lt;small&gt;[DevOps, Azure, Cloud, Automação, Monitoramento, Observabilidade]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Terraform, Bicep, IaC, Azure, Cloud, Automação&quot;&gt;
    &lt;a href=&quot;/interview_questions/96/&quot;&gt;Terraform vs Bicep: key concept relevant to architecture in Azure &lt;small&gt;[Terraform, Bicep, IaC, Azure, Cloud, Automação]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Monitoring, Azure, Cloud, Observabilidade, Telemetria, Performance&quot;&gt;
    &lt;a href=&quot;/interview_questions/97/&quot;&gt;Monitoring: key concept relevant to architecture in Azure &lt;small&gt;[Monitoring, Azure, Cloud, Observabilidade, Telemetria, Performance]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Authentication, Azure, Cloud, Segurança, Identidade, Zero Trust&quot;&gt;
    &lt;a href=&quot;/interview_questions/98/&quot;&gt;Authentication: key concept relevant to architecture in Azure &lt;small&gt;[Authentication, Azure, Cloud, Segurança, Identidade, Zero Trust]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;DevOps, Azure, Cloud, Automação, GitOps, Deployment&quot;&gt;
    &lt;a href=&quot;/interview_questions/99/&quot;&gt;DevOps: key concept relevant to architecture in Azure &lt;small&gt;[DevOps, Azure, Cloud, Automação, GitOps, Deployment]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Bicep, IaC, Azure, Cloud, Automação, Governança&quot;&gt;
    &lt;a href=&quot;/interview_questions/100/&quot;&gt;Bicep &amp;amp; IaC: Provisionando environments no Azure e advantages &lt;small&gt;[Bicep, IaC, Azure, Cloud, Automação, Governança]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;GitHub Actions, CI/CD, Azure, Cloud, DevOps, Automação&quot;&gt;
    &lt;a href=&quot;/interview_questions/101/&quot;&gt;GitHub Actions: Pipeline de CI/CD for deploy em Azure &lt;small&gt;[GitHub Actions, CI/CD, Azure, Cloud, DevOps, Automação]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure Storage, Azure, Cloud, Armazenamento, Performance, Otimização&quot;&gt;
    &lt;a href=&quot;/interview_questions/102/&quot;&gt;Azure Storage: key concept relevant to architecture in Azure &lt;small&gt;[Azure Storage, Azure, Cloud, Armazenamento, Performance, Otimização]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Security, Azure, Cloud, Segurança, Compliance, Zero Trust&quot;&gt;
    &lt;a href=&quot;/interview_questions/103/&quot;&gt;Security: key concept relevant to architecture in Azure &lt;small&gt;[Security, Azure, Cloud, Segurança, Compliance, Zero Trust]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Service Bus, Event Hub, Azure, Cloud, Mensageria, Event Streaming&quot;&gt;
    &lt;a href=&quot;/interview_questions/104/&quot;&gt;Service Bus vs Event Hub: When utilizar each one? &lt;small&gt;[Service Bus, Event Hub, Azure, Cloud, Mensageria, Event Streaming]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Cost Management, Azure, Cloud, FinOps, Otimização, Governança&quot;&gt;
    &lt;a href=&quot;/interview_questions/105/&quot;&gt;Cost Management: key concept relevant to architecture in Azure &lt;small&gt;[Cost Management, Azure, Cloud, FinOps, Otimização, Governança]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Environment Strategies, Azure, Cloud, Governança, DevOps, Automação&quot;&gt;
    &lt;a href=&quot;/interview_questions/106/&quot;&gt;Environment Strategies: key concept relevant to architecture in Azure &lt;small&gt;[Environment Strategies, Azure, Cloud, Governança, DevOps, Automação]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;AKS, ACA, Azure, Cloud, Containers, Serverless&quot;&gt;
    &lt;a href=&quot;/interview_questions/107/&quot;&gt;AKS vs ACA: main diferenças between Azure Kubernetes Service e Azure Container Apps &lt;small&gt;[AKS, ACA, Azure, Cloud, Containers, Serverless]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Environment Strategies, Azure, Cloud, Governança, Isolamento, Segurança&quot;&gt;
    &lt;a href=&quot;/interview_questions/108/&quot;&gt;Environment Strategies: key concept relevant to architecture in Azure &lt;small&gt;[Environment Strategies, Azure, Cloud, Governança, Isolamento, Segurança]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;CI/CD, Azure, Cloud, DevOps, Automação, Quality Gates&quot;&gt;
    &lt;a href=&quot;/interview_questions/109/&quot;&gt;CI/CD pipelines: key concept relevant to architecture in Azure &lt;small&gt;[CI/CD, Azure, Cloud, DevOps, Automação, Quality Gates]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Service Bus, Event Hub, Azure, Cloud, Mensageria, Architecture Patterns&quot;&gt;
    &lt;a href=&quot;/interview_questions/110/&quot;&gt;Service Bus vs Event Hub: When utilizar each one? &lt;small&gt;[Service Bus, Event Hub, Azure, Cloud, Mensageria, Architecture Patterns]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;DX, Developer Experience, Azure, Cloud, Produtividade, Tooling&quot;&gt;
    &lt;a href=&quot;/interview_questions/111/&quot;&gt;DX: key concept relevant to architecture in Azure &lt;small&gt;[DX, Developer Experience, Azure, Cloud, Produtividade, Tooling]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure Storage, Azure, Cloud, Armazenamento, CDN, Performance&quot;&gt;
    &lt;a href=&quot;/interview_questions/112/&quot;&gt;Azure Storage: key concept relevant to architecture in Azure &lt;small&gt;[Azure Storage, Azure, Cloud, Armazenamento, CDN, Performance]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Resource Management, Azure, Cloud, Governança, Tags, Organization&quot;&gt;
    &lt;a href=&quot;/interview_questions/113/&quot;&gt;Resource Management: key concept relevant to architecture in Azure &lt;small&gt;[Resource Management, Azure, Cloud, Governança, Tags, Organization]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure Storage, Azure, Cloud, Armazenamento, Security, Encryption&quot;&gt;
    &lt;a href=&quot;/interview_questions/114/&quot;&gt;Azure Storage: key concept relevant to architecture in Azure &lt;small&gt;[Azure Storage, Azure, Cloud, Armazenamento, Security, Encryption]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Managed Identity, Azure, Cloud, Segurança, Identidade, Zero Trust&quot;&gt;
    &lt;a href=&quot;/interview_questions/115/&quot;&gt;Managed Identity: Importância for security no Azure &lt;small&gt;[Managed Identity, Azure, Cloud, Segurança, Identidade, Zero Trust]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Developer Experience, DX, Azure, Cloud, Produtividade, Testing&quot;&gt;
    &lt;a href=&quot;/interview_questions/116/&quot;&gt;Developer Experience: key concept relevant to architecture in Azure &lt;small&gt;[Developer Experience, DX, Azure, Cloud, Produtividade, Testing]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Service Bus, Event Hub, Azure, Cloud, Mensageria, Scaling Patterns&quot;&gt;
    &lt;a href=&quot;/interview_questions/117/&quot;&gt;Service Bus vs Event Hub: When utilizar each one? &lt;small&gt;[Service Bus, Event Hub, Azure, Cloud, Mensageria, Scaling Patterns]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Terraform, Bicep, IaC, Azure, Cloud, Governance&quot;&gt;
    &lt;a href=&quot;/interview_questions/118/&quot;&gt;Terraform vs Bicep: key concept relevant to architecture in Azure &lt;small&gt;[Terraform, Bicep, IaC, Azure, Cloud, Governance]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;GitHub Actions, CI/CD, Azure, Cloud, DevOps, Security&quot;&gt;
    &lt;a href=&quot;/interview_questions/119/&quot;&gt;GitHub Actions: Pipeline de CI/CD for deploy em Azure &lt;small&gt;[GitHub Actions, CI/CD, Azure, Cloud, DevOps, Security]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Managed Identity, Azure, Cloud, Segurança, Automation, DevOps&quot;&gt;
    &lt;a href=&quot;/interview_questions/120/&quot;&gt;Managed Identity: Importância for security no Azure &lt;small&gt;[Managed Identity, Azure, Cloud, Segurança, Automation, DevOps]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Monitoring, Azure, Cloud, Observabilidade, Alerting, SRE&quot;&gt;
    &lt;a href=&quot;/interview_questions/121/&quot;&gt;Monitoring: key concept relevant to architecture in Azure &lt;small&gt;[Monitoring, Azure, Cloud, Observabilidade, Alerting, SRE]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;AKS, ACA, Azure, Cloud, Containers, Cost Model&quot;&gt;
    &lt;a href=&quot;/interview_questions/122/&quot;&gt;AKS vs ACA: main diferenças between Azure Kubernetes Service e Azure Container Apps &lt;small&gt;[AKS, ACA, Azure, Cloud, Containers, Cost Model]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;App Service, Function App, Azure, Cloud, Serverless, Integration&quot;&gt;
    &lt;a href=&quot;/interview_questions/123/&quot;&gt;App Service &amp;amp; Function App: key concept relevant to architecture in Azure &lt;small&gt;[App Service, Function App, Azure, Cloud, Serverless, Integration]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure Storage, Azure, Cloud, Armazenamento, Disaster Recovery, Backup&quot;&gt;
    &lt;a href=&quot;/interview_questions/124/&quot;&gt;Azure Storage: key concept relevant to architecture in Azure &lt;small&gt;[Azure Storage, Azure, Cloud, Armazenamento, Disaster Recovery, Backup]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Managed Identity, Azure, Cloud, Segurança, Compliance, Governance&quot;&gt;
    &lt;a href=&quot;/interview_questions/125/&quot;&gt;Managed Identity: Importância for security no Azure &lt;small&gt;[Managed Identity, Azure, Cloud, Segurança, Compliance, Governance]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure Basics, Azure, Cloud, IaaS, PaaS, SaaS&quot;&gt;
    &lt;a href=&quot;/interview_questions/126/&quot;&gt;Azure Basics: Modelos de services in the cloud (IaaS, PaaS, SaaS) no Azure &lt;small&gt;[Azure Basics, Azure, Cloud, IaaS, PaaS, SaaS]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Microservices, Azure, Cloud, Arquitetura, Service Mesh, Communication&quot;&gt;
    &lt;a href=&quot;/interview_questions/127/&quot;&gt;Microservices: key concept relevant to architecture in Azure &lt;small&gt;[Microservices, Azure, Cloud, Arquitetura, Service Mesh, Communication]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;CLI, Azure, Cloud, Automação, Scripting, PowerShell&quot;&gt;
    &lt;a href=&quot;/interview_questions/128/&quot;&gt;CLI withmands: key concept relevant to architecture in Azure &lt;small&gt;[CLI, Azure, Cloud, Automação, Scripting, PowerShell]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;CLI, Azure, Cloud, Automação, REST API, Integration&quot;&gt;
    &lt;a href=&quot;/interview_questions/129/&quot;&gt;CLI withmands: key concept relevant to architecture in Azure &lt;small&gt;[CLI, Azure, Cloud, Automação, REST API, Integration]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Environment Strategies, Azure, Cloud, Governança, Compliance, Policy&quot;&gt;
    &lt;a href=&quot;/interview_questions/130/&quot;&gt;Environment Strategies: key concept relevant to architecture in Azure &lt;small&gt;[Environment Strategies, Azure, Cloud, Governança, Compliance, Policy]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;RBAC, Azure, Cloud, Segurança, Governança, Custom Roles&quot;&gt;
    &lt;a href=&quot;/interview_questions/131/&quot;&gt;RBAC: key concept relevant to architecture in Azure &lt;small&gt;[RBAC, Azure, Cloud, Segurança, Governança, Custom Roles]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;.NET, Azure, Cloud, Arquitetura, Performance, Optimization&quot;&gt;
    &lt;a href=&quot;/interview_questions/132/&quot;&gt;.NET + Azure: key concept relevant to architecture in Azure &lt;small&gt;[.NET, Azure, Cloud, Arquitetura, Performance, Optimization]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;GitHub Actions, CI/CD, Azure, Cloud, DevOps, Matrix Strategy&quot;&gt;
    &lt;a href=&quot;/interview_questions/133/&quot;&gt;GitHub Actions: Pipeline de CI/CD for deploy em Azure &lt;small&gt;[GitHub Actions, CI/CD, Azure, Cloud, DevOps, Matrix Strategy]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure Storage, Azure, Cloud, Armazenamento, Integration, Event Grid&quot;&gt;
    &lt;a href=&quot;/interview_questions/134/&quot;&gt;Azure Storage: key concept relevant to architecture in Azure &lt;small&gt;[Azure Storage, Azure, Cloud, Armazenamento, Integration, Event Grid]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;App Service, Function App, Azure, Cloud, Scaling, Performance&quot;&gt;
    &lt;a href=&quot;/interview_questions/135/&quot;&gt;App Service &amp;amp; Function App: key concept relevant to architecture in Azure &lt;small&gt;[App Service, Function App, Azure, Cloud, Scaling, Performance]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Cost Management, Azure, Cloud, FinOps, Optimization, Reservations&quot;&gt;
    &lt;a href=&quot;/interview_questions/136/&quot;&gt;Cost Management: key concept relevant to architecture in Azure &lt;small&gt;[Cost Management, Azure, Cloud, FinOps, Optimization, Reservations]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;RBAC, Azure, Cloud, Segurança, Automation, Lifecycle&quot;&gt;
    &lt;a href=&quot;/interview_questions/137/&quot;&gt;RBAC: key concept relevant to architecture in Azure &lt;small&gt;[RBAC, Azure, Cloud, Segurança, Automation, Lifecycle]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;App Service, Function App, Azure, Cloud, Deployment, Slots&quot;&gt;
    &lt;a href=&quot;/interview_questions/138/&quot;&gt;App Service &amp;amp; Function App: key concept relevant to architecture in Azure &lt;small&gt;[App Service, Function App, Azure, Cloud, Deployment, Slots]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;App Registrations, Azure, Cloud, Identidade, API Management, OAuth&quot;&gt;
    &lt;a href=&quot;/interview_questions/139/&quot;&gt;App Registrations: key concept relevant to architecture in Azure &lt;small&gt;[App Registrations, Azure, Cloud, Identidade, API Management, OAuth]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Developer Experience, DX, Azure, Cloud, Collaboration, Productivity&quot;&gt;
    &lt;a href=&quot;/interview_questions/140/&quot;&gt;Developer Experience: key concept relevant to architecture in Azure &lt;small&gt;[Developer Experience, DX, Azure, Cloud, Collaboration, Productivity]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure Basics, Azure, Cloud, Migration, Strategy, Planning&quot;&gt;
    &lt;a href=&quot;/interview_questions/141/&quot;&gt;Azure Basics: Modelos de services in the cloud (IaaS, PaaS, SaaS) no Azure &lt;small&gt;[Azure Basics, Azure, Cloud, Migration, Strategy, Planning]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Microservices, Azure, Cloud, Arquitetura, Data Management, Consistency&quot;&gt;
    &lt;a href=&quot;/interview_questions/142/&quot;&gt;Microservices: key concept relevant to architecture in Azure &lt;small&gt;[Microservices, Azure, Cloud, Arquitetura, Data Management, Consistency]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Developer Experience, DX, Azure, Cloud, Testing, Quality&quot;&gt;
    &lt;a href=&quot;/interview_questions/143/&quot;&gt;Developer Experience: key concept relevant to architecture in Azure &lt;small&gt;[Developer Experience, DX, Azure, Cloud, Testing, Quality]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;App Service, Function App, Azure, Cloud, Monitoring, Diagnostics&quot;&gt;
    &lt;a href=&quot;/interview_questions/144/&quot;&gt;App Service &amp;amp; Function App: key concept relevant to architecture in Azure &lt;small&gt;[App Service, Function App, Azure, Cloud, Monitoring, Diagnostics]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;RBAC, Azure, Cloud, Segurança, Conditional Access, Zero Trust&quot;&gt;
    &lt;a href=&quot;/interview_questions/145/&quot;&gt;RBAC: key concept relevant to architecture in Azure &lt;small&gt;[RBAC, Azure, Cloud, Segurança, Conditional Access, Zero Trust]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;RBAC, Azure, Cloud, Segurança, PIM, Just-in-Time&quot;&gt;
    &lt;a href=&quot;/interview_questions/146/&quot;&gt;RBAC: key concept relevant to architecture in Azure &lt;small&gt;[RBAC, Azure, Cloud, Segurança, PIM, Just-in-Time]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;CLI, Azure, Cloud, Automação, Infrastructure, GitOps&quot;&gt;
    &lt;a href=&quot;/interview_questions/147/&quot;&gt;CLI withmands: key concept relevant to architecture in Azure &lt;small&gt;[CLI, Azure, Cloud, Automação, Infrastructure, GitOps]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Azure Basics, Azure, Cloud, Economics, TCO, ROI&quot;&gt;
    &lt;a href=&quot;/interview_questions/148/&quot;&gt;Azure Basics: Modelos de services in the cloud (IaaS, PaaS, SaaS) no Azure &lt;small&gt;[Azure Basics, Azure, Cloud, Economics, TCO, ROI]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Bicep, IaC, Azure, Cloud, Testing, Validation&quot;&gt;
    &lt;a href=&quot;/interview_questions/149/&quot;&gt;Bicep &amp;amp; IaC: Provisionando environments no Azure e advantages &lt;small&gt;[Bicep, IaC, Azure, Cloud, Testing, Validation]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Security, Azure, Cloud, Zero Trust, Threat Intelligence, SIEM&quot;&gt;
    &lt;a href=&quot;/interview_questions/150/&quot;&gt;Security: key concept relevant to architecture in Azure &lt;small&gt;[Security, Azure, Cloud, Zero Trust, Threat Intelligence, SIEM]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;azure, bicep, iac, infrastructure-as-code, devops, arm, provisioning, cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/151/&quot;&gt;How usar Bicep for provisionar um environment no Azure e suas advantages &lt;small&gt;[azure, bicep, iac, infrastructure-as-code, devops, arm, provisioning, cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;design-patterns, decorator, gof, structural-patterns, oop, extensibility, composition, behavioral&quot;&gt;
    &lt;a href=&quot;/interview_questions/152/&quot;&gt;How implementsr o padrão Decorator e em Which situações utilizá-lo &lt;small&gt;[design-patterns, decorator, gof, structural-patterns, oop, extensibility, composition, behavioral]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;sql-server, postgresql, database, rdbms, comparison, performance, licensing, features&quot;&gt;
    &lt;a href=&quot;/interview_questions/153/&quot;&gt;Diferenças between SQL Server e PostgreSQL e When usar each one &lt;small&gt;[sql-server, postgresql, database, rdbms, comparison, performance, licensing, features]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;design-patterns, observer, gof, behavioral-patterns, events, thread-safety, performance, notifications&quot;&gt;
    &lt;a href=&quot;/interview_questions/154/&quot;&gt;How implementsr o padrão Observer de forma efficient e thread-safe &lt;small&gt;[design-patterns, observer, gof, behavioral-patterns, events, thread-safety, performance, notifications]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;pwa, progressive-web-apps, service-worker, web-manifest, offline, push-notifications, web-development&quot;&gt;
    &lt;a href=&quot;/interview_questions/155/&quot;&gt;What are Progressive Web Apps (PWAs) e How implementá-las &lt;small&gt;[pwa, progressive-web-apps, service-worker, web-manifest, offline, push-notifications, web-development]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;DevOps, Azure, Cloud, Automação, Infrastructure, Pipelines&quot;&gt;
    &lt;a href=&quot;/interview_questions/156/&quot;&gt;DevOps: key concept relevant to architecture in Azure &lt;small&gt;[DevOps, Azure, Cloud, Automação, Infrastructure, Pipelines]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;RBAC, Azure, Cloud, Segurança, Access Control, Governance&quot;&gt;
    &lt;a href=&quot;/interview_questions/157/&quot;&gt;RBAC: key concept relevant to architecture in Azure &lt;small&gt;[RBAC, Azure, Cloud, Segurança, Access Control, Governance]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;Terraform, Bicep, IaC, Azure, Cloud, Multi-cloud&quot;&gt;
    &lt;a href=&quot;/interview_questions/158/&quot;&gt;Terraform vs Bicep: key concept relevant to architecture in Azure &lt;small&gt;[Terraform, Bicep, IaC, Azure, Cloud, Multi-cloud]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;App Registrations, Azure, Cloud, Identity, Security, API Management&quot;&gt;
    &lt;a href=&quot;/interview_questions/159/&quot;&gt;App Registrations: key concept relevant to architecture in Azure &lt;small&gt;[App Registrations, Azure, Cloud, Identity, Security, API Management]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li data-tags=&quot;RBAC, Azure, Cloud, Segurança, Enterprise, Governance&quot;&gt;
    &lt;a href=&quot;/interview_questions/160/&quot;&gt;RBAC: key concept relevant to architecture in Azure &lt;small&gt;[RBAC, Azure, Cloud, Segurança, Enterprise, Governance]&lt;/small&gt;&lt;/a&gt;
  &lt;/li&gt;
  
&lt;/ol&gt;

&lt;script&gt;
  (function () {
    const tagFilter = document.getElementById(&apos;tagFilter&apos;);
    const questionsList = document.getElementById(&apos;questionsList&apos;);
    if (tagFilter &amp;&amp; questionsList) {
      tagFilter.addEventListener(&apos;change&apos;, function () {
        const checked = Array.from(tagFilter.querySelectorAll(&apos;input[type=&quot;checkbox&quot;]:checked&apos;)).map(cb =&gt; cb.value);
        Array.from(questionsList.getElementsByTagName(&apos;li&apos;)).forEach(function (li) {
          const tags = li.getAttribute(&apos;data-tags&apos;) ? li.getAttribute(&apos;data-tags&apos;).split(&apos;, &apos;) : [];
          li.style.display = (checked.length === 0 || checked.some(tag =&gt; tags.includes(tag))) ? &apos;&apos; : &apos;none&apos;;
        });
      });
    }
  })();
&lt;/script&gt;

&lt;hr /&gt;
</description>
        <pubDate>Mon, 16 Jun 2025 09:00:00 -0300</pubDate>
        <link>http://matheus-vieira.github.io/blog/pt-br/interview/questoes-para-entrevistas/</link>
        <guid isPermaLink="true">http://matheus-vieira.github.io/blog/pt-br/interview/questoes-para-entrevistas/</guid>
        
        <category>interview</category>
        
        
        <category>pt-br</category>
        
        <category>interview</category>
        
      </item>
    
      <item>
        <title>Azure Functions vs Durable Functions — Um caso de uso real</title>
        <description>&lt;p&gt;Como engenheiro de software sênior, frequentemente enfrento a decisão de escolher entre &lt;strong&gt;Azure Functions&lt;/strong&gt; e &lt;strong&gt;Durable Functions&lt;/strong&gt; para soluções cloud-native. Embora ambas sejam poderosas, entender seus pontos fortes é crucial — especialmente quando os requisitos vão além do simples processamento de eventos.&lt;/p&gt;

&lt;h2 id=&quot;o-caso-de-uso-fluxo-de-processamento-de-pedidos&quot;&gt;O Caso de Uso: Fluxo de Processamento de Pedidos&lt;/h2&gt;

&lt;p&gt;Vamos considerar um cenário real: processar pedidos de clientes em um sistema de e-commerce. O fluxo envolve várias etapas:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Receber o pedido&lt;/strong&gt; (gatilho HTTP)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Validar pagamento&lt;/strong&gt; (chamada de API externa)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Verificar estoque&lt;/strong&gt; (consulta ao banco de dados)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reservar estoque&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Iniciar envio&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Enviar confirmação ao cliente&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cada etapa pode levar tempo, depender de sistemas externos ou exigir tentativas de repetição.&lt;/p&gt;

&lt;h2 id=&quot;por-que-não-usar-apenas-azure-functions&quot;&gt;Por que não usar apenas Azure Functions?&lt;/h2&gt;

&lt;p&gt;À primeira vista, você pode tentar implementar isso com uma única Azure Function ou uma cadeia de funções acionadas por eventos (por exemplo, filas ou requisições HTTP). No entanto, essa abordagem rapidamente encontra limitações:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Gerenciamento de Estado:&lt;/strong&gt; Azure Functions são stateless. Você precisaria persistir o estado externamente (por exemplo, em um banco de dados) e gerenciar o progresso do fluxo manualmente.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Operações de Longa Duração:&lt;/strong&gt; Azure Functions possuem timeouts de execução (normalmente 5-10 minutos). Se a validação de pagamento ou envio demorar mais, a função falha.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tratamento de Erros:&lt;/strong&gt; Implementar tentativas, compensações e lógica de recuperação entre várias funções se torna complexo e propenso a erros.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Orquestração:&lt;/strong&gt; Encadear funções e lidar com dependências (por exemplo, não enviar antes de confirmar o pagamento) exige coordenação manual, frequentemente levando a um “código espaguete”.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;por-que-durable-functions-são-a-escolha-certa&quot;&gt;Por que Durable Functions são a escolha certa&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Durable Functions&lt;/strong&gt; resolvem esses desafios oferecendo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Orquestração integrada:&lt;/strong&gt; Defina o fluxo como código usando funções orquestradoras. Cada etapa é uma função de atividade separada, e as dependências são explícitas.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Execução com estado:&lt;/strong&gt; O framework gerencia estado, checkpoints e reinicializações automaticamente — mesmo em caso de falhas ou reinícios.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Suporte a operações longas:&lt;/strong&gt; Os fluxos podem durar horas ou dias, aguardando eventos externos (por exemplo, confirmação de pagamento) sem consumir recursos.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tratamento robusto de erros:&lt;/strong&gt; Suporte nativo para tentativas, compensações e propagação de erros.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Exemplo de Orquestrador (C#):&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;[FunctionName(&quot;OrderProcessingOrchestrator&quot;)]
public async Task RunOrchestrator(
    [OrchestrationTrigger] IDurableOrchestrationContext context)
{
    var order = context.GetInput&amp;lt;Order&amp;gt;();
    await context.CallActivityAsync(&quot;ValidatePayment&quot;, order);
    await context.CallActivityAsync(&quot;CheckInventory&quot;, order);
    await context.CallActivityAsync(&quot;ReserveStock&quot;, order);
    await context.CallActivityAsync(&quot;InitiateShipping&quot;, order);
    await context.CallActivityAsync(&quot;SendConfirmation&quot;, order);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;principais-diferenças&quot;&gt;Principais Diferenças&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Recurso&lt;/th&gt;
      &lt;th&gt;Azure Functions&lt;/th&gt;
      &lt;th&gt;Durable Functions&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Gerenciamento de Estado&lt;/td&gt;
      &lt;td&gt;Stateless&lt;/td&gt;
      &lt;td&gt;Stateful (gerenciado pelo framework)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Orquestração de Fluxo&lt;/td&gt;
      &lt;td&gt;Manual&lt;/td&gt;
      &lt;td&gt;Integrada (funções orquestradoras)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Suporte a Longa Duração&lt;/td&gt;
      &lt;td&gt;Limitado (timeout)&lt;/td&gt;
      &lt;td&gt;Sim (pode durar dias)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tratamento de Erros&lt;/td&gt;
      &lt;td&gt;Básico&lt;/td&gt;
      &lt;td&gt;Avançado (tentativas, checkpoints)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Fan-out/Fan-in&lt;/td&gt;
      &lt;td&gt;Manual&lt;/td&gt;
      &lt;td&gt;Padrões integrados&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Para tarefas simples, sem estado e de curta duração, &lt;strong&gt;Azure Functions&lt;/strong&gt; são ideais. Mas quando o fluxo envolve múltiplas etapas, dependências externas e operações longas — como no exemplo de processamento de pedidos — &lt;strong&gt;Durable Functions&lt;/strong&gt; oferecem a orquestração, confiabilidade e manutenção que você precisa. Escolher a ferramenta certa garante que suas soluções em nuvem sejam robustas e escaláveis.&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Jun 2025 14:01:00 -0300</pubDate>
        <link>http://matheus-vieira.github.io/blog/pt-br/dotnet-and-azure-foundations/azure-function-vs-durable-functions/</link>
        <guid isPermaLink="true">http://matheus-vieira.github.io/blog/pt-br/dotnet-and-azure-foundations/azure-function-vs-durable-functions/</guid>
        
        <category>dotnet</category>
        
        <category>dotnet</category>
        
        <category>core</category>
        
        <category>.net</category>
        
        <category>.net-core</category>
        
        <category>azure</category>
        
        
        <category>pt-br</category>
        
        <category>dotnet-and-azure-foundations</category>
        
      </item>
    
      <item>
        <title>Azure Functions vs Durable Functions — A Real-World Use Case</title>
        <description>&lt;p&gt;As a senior software engineer, I’ve often faced the decision of choosing between &lt;strong&gt;Azure Functions&lt;/strong&gt; and &lt;strong&gt;Durable Functions&lt;/strong&gt; for cloud-native solutions. While both are powerful, understanding their strengths is crucial—especially when your requirements go beyond simple event processing.&lt;/p&gt;

&lt;h2 id=&quot;the-use-case-order-processing-workflow&quot;&gt;The Use Case: Order Processing Workflow&lt;/h2&gt;

&lt;p&gt;Let’s consider a real-world scenario: processing customer orders in an e-commerce system. The workflow involves several steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Receive the order&lt;/strong&gt; (HTTP trigger)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Validate payment&lt;/strong&gt; (external API call)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Check inventory&lt;/strong&gt; (database query)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reserve stock&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Initiate shipping&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Send confirmation to the customer&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each step may take time, depend on external systems, or require retries.&lt;/p&gt;

&lt;h2 id=&quot;why-not-just-use-azure-functions&quot;&gt;Why Not Just Use Azure Functions?&lt;/h2&gt;

&lt;p&gt;At first glance, you might try to implement this with a single Azure Function or a chain of functions triggered by events (e.g., queues or HTTP requests). However, this approach quickly runs into limitations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;State Management:&lt;/strong&gt; Azure Functions are stateless. You’d need to persist state externally (e.g., in a database) and manage workflow progress yourself.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Long-Running Operations:&lt;/strong&gt; Azure Functions have execution timeouts (typically 5-10 minutes). If payment validation or shipping takes longer, the function fails.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Error Handling:&lt;/strong&gt; Implementing retries, compensation, and recovery logic across multiple functions becomes complex and error-prone.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Orchestration:&lt;/strong&gt; Chaining functions and handling dependencies (e.g., don’t ship before payment is confirmed) requires manual coordination, often leading to “spaghetti code.”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-durable-functions-are-the-right-fit&quot;&gt;Why Durable Functions Are the Right Fit&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Durable Functions&lt;/strong&gt; solve these challenges by providing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Built-in Orchestration:&lt;/strong&gt; Define the workflow as code using orchestrator functions. Each step is a separate activity function, and dependencies are explicit.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stateful Execution:&lt;/strong&gt; The framework manages state, checkpoints, and restarts automatically—even across failures or restarts.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Long-Running Support:&lt;/strong&gt; Workflows can run for hours or days, waiting for external events (e.g., payment confirmation) without holding resources.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Robust Error Handling:&lt;/strong&gt; Built-in support for retries, compensation, and error propagation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example Orchestrator (C#):&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;[FunctionName(&quot;OrderProcessingOrchestrator&quot;)]
public async Task RunOrchestrator(
    [OrchestrationTrigger] IDurableOrchestrationContext context)
{
    var order = context.GetInput&amp;lt;Order&amp;gt;();
    await context.CallActivityAsync(&quot;ValidatePayment&quot;, order);
    await context.CallActivityAsync(&quot;CheckInventory&quot;, order);
    await context.CallActivityAsync(&quot;ReserveStock&quot;, order);
    await context.CallActivityAsync(&quot;InitiateShipping&quot;, order);
    await context.CallActivityAsync(&quot;SendConfirmation&quot;, order);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;key-differences&quot;&gt;Key Differences&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Feature&lt;/th&gt;
      &lt;th&gt;Azure Functions&lt;/th&gt;
      &lt;th&gt;Durable Functions&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;State Management&lt;/td&gt;
      &lt;td&gt;Stateless&lt;/td&gt;
      &lt;td&gt;Stateful (managed by framework)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Workflow Orchestration&lt;/td&gt;
      &lt;td&gt;Manual&lt;/td&gt;
      &lt;td&gt;Built-in (orchestrator functions)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Long-running Support&lt;/td&gt;
      &lt;td&gt;Limited (timeout)&lt;/td&gt;
      &lt;td&gt;Yes (can run for days)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Error Handling&lt;/td&gt;
      &lt;td&gt;Basic&lt;/td&gt;
      &lt;td&gt;Advanced (retries, checkpoints)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Fan-out/Fan-in&lt;/td&gt;
      &lt;td&gt;Manual&lt;/td&gt;
      &lt;td&gt;Built-in patterns&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;For simple, stateless, and short-lived tasks, &lt;strong&gt;Azure Functions&lt;/strong&gt; are ideal. But when your workflow involves multiple steps, external dependencies, and long-running operations—like our order processing example—&lt;strong&gt;Durable Functions&lt;/strong&gt; provide the orchestration, reliability, and maintainability you need. Choosing the right tool ensures your cloud solutions are robust and scalable.&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Jun 2025 14:01:00 -0300</pubDate>
        <link>http://matheus-vieira.github.io/blog/en-us/dotnet-and-azure-foundations/azure-function-vs-durable-functions/</link>
        <guid isPermaLink="true">http://matheus-vieira.github.io/blog/en-us/dotnet-and-azure-foundations/azure-function-vs-durable-functions/</guid>
        
        <category>dotnet</category>
        
        <category>dotnet</category>
        
        <category>core</category>
        
        <category>.net</category>
        
        <category>.net-core</category>
        
        <category>azure</category>
        
        
        <category>en-us</category>
        
        <category>dotnet-and-azure-foundations</category>
        
      </item>
    
      <item>
        <title>Why I Use .NET 8 for Modern Backend Solutions</title>
        <description>&lt;p&gt;In my experience building scalable backend systems for enterprises across industries like finance, retail, and tech, one thing has remained consistent: the need for performance, reliability, and maintainability. That’s why I’ve made .NET 8 my go-to framework for backend development.&lt;/p&gt;

&lt;p&gt;Let me share why .NET 8 has become a key part of my engineering toolkit—and why it might deserve a place in yours too.&lt;/p&gt;

&lt;h2 id=&quot;-performance-that-meets-enterprise-demands&quot;&gt;🚀 Performance that Meets Enterprise Demands&lt;/h2&gt;

&lt;p&gt;.NET 8 introduced significant performance improvements over previous versions. Whether it’s through Just-In-Time (JIT) compiler optimizations or native AOT (ahead-of-time) compilation, this version of .NET handles high-throughput scenarios with ease. In production systems handling millions of records per day, I’ve seen clear gains in memory usage and execution speed—without needing to rewrite existing codebases.&lt;/p&gt;

&lt;p&gt;In real-world use cases, like data ingestion systems I’ve built for financial institutions, shaving off milliseconds per request translated into substantial infrastructure savings and better user responsiveness.&lt;/p&gt;

&lt;h2 id=&quot;️-modern-language-features--cleaner-code&quot;&gt;🛠️ Modern Language Features = Cleaner Code&lt;/h2&gt;

&lt;p&gt;C# 12, which ships with .NET 8, continues to simplify developer experience. Features like primary constructors for classes and collection expressions let us write more expressive and compact code. Combined with nullable reference types and pattern matching enhancements, these additions contribute directly to cleaner, safer backend logic.&lt;/p&gt;

&lt;p&gt;I’ve noticed this helps onboard junior developers more quickly too. The language encourages writing intention-revealing code, which is essential when working in cross-functional teams or handing off projects between squads.&lt;/p&gt;

&lt;h2 id=&quot;️-seamless-cloud-integration-with-azure&quot;&gt;☁️ Seamless Cloud Integration with Azure&lt;/h2&gt;

&lt;p&gt;One of .NET 8’s greatest strengths is its deep integration with Microsoft Azure. Whether I’m implementing Azure Functions, Durable Functions for long-running workflows, or Event Grid to decouple microservices, the tooling and SDK support in .NET is unmatched.&lt;/p&gt;

&lt;p&gt;I’ve built systems using .NET 8 that scale from zero to thousands of requests per second using Azure Functions, while maintaining observability through Application Insights and logging via Serilog + ELK Stack. These integrations save time and reduce the risk of deployment errors significantly.&lt;/p&gt;

&lt;h2 id=&quot;-first-class-testing-and-observability&quot;&gt;🧪 First-Class Testing and Observability&lt;/h2&gt;

&lt;p&gt;.NET’s built-in support for unit testing (via xUnit, MSTest, or NUnit) is mature and well-documented. Combined with mocking libraries like Moq and FluentAssertions, I can ensure my services are covered by meaningful, maintainable tests. .NET 8 makes it easier than ever to integrate testing into CI/CD pipelines using GitHub Actions or Azure DevOps.&lt;/p&gt;

&lt;p&gt;On the observability side, structured logging with Serilog and the integration with OpenTelemetry allow me to trace requests end-to-end—even across distributed services.&lt;/p&gt;

&lt;h2 id=&quot;-long-term-support-and-ecosystem-stability&quot;&gt;🔄 Long-Term Support and Ecosystem Stability&lt;/h2&gt;

&lt;p&gt;As a senior engineer, I need to build systems that aren’t just functional today, but maintainable and secure long into the future. .NET 8 is an LTS (Long-Term Support) release, making it a reliable choice for enterprise-grade applications. I don’t have to worry about deprecated APIs or unstable community packages—Microsoft’s ecosystem and NuGet library maturity give me peace of mind.&lt;/p&gt;

&lt;h2 id=&quot;-the-verdict&quot;&gt;✅ The Verdict&lt;/h2&gt;

&lt;p&gt;.NET 8 isn’t just a version bump. It’s a milestone in a mature, battle-tested platform that continues to evolve in the right direction. It balances performance, productivity, and stability—three pillars of great software engineering.&lt;/p&gt;

&lt;p&gt;For developers focused on backend systems, especially in domains like finance, healthcare, or enterprise SaaS, .NET 8 offers a clean, modern foundation to build high-quality solutions.&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Jun 2025 10:25:00 -0300</pubDate>
        <link>http://matheus-vieira.github.io/blog/en-us/dotnet-and-azure-foundations/why-I-use-dotnet-for-modern-backend-solutions/</link>
        <guid isPermaLink="true">http://matheus-vieira.github.io/blog/en-us/dotnet-and-azure-foundations/why-I-use-dotnet-for-modern-backend-solutions/</guid>
        
        <category>dotnet</category>
        
        <category>dotnet</category>
        
        <category>core</category>
        
        <category>.net</category>
        
        <category>.net-core</category>
        
        <category>azure</category>
        
        
        <category>en-us</category>
        
        <category>dotnet-and-azure-foundations</category>
        
      </item>
    
      <item>
        <title>Por que uso .NET 8 para soluções modernas de backend</title>
        <description>&lt;p&gt;Na minha experiência construindo sistemas de backend escaláveis para empresas dos setores financeiro, varejo e tecnologia, uma coisa sempre foi constante: a necessidade de performance, confiabilidade e facilidade de manutenção. Por isso, adotei o .NET 8 como meu framework principal para desenvolvimento de backend.&lt;/p&gt;

&lt;p&gt;Vou compartilhar por que o .NET 8 se tornou uma peça-chave no meu kit de ferramentas de engenharia — e por que ele pode merecer um espaço no seu também.&lt;/p&gt;

&lt;h2 id=&quot;-performance-que-atende-demandas-empresariais&quot;&gt;🚀 Performance que atende demandas empresariais&lt;/h2&gt;

&lt;p&gt;O .NET 8 trouxe melhorias significativas de performance em relação às versões anteriores. Seja por otimizações no compilador Just-In-Time (JIT) ou pela compilação nativa AOT (ahead-of-time), esta versão do .NET lida com cenários de alto volume com facilidade. Em sistemas de produção que processam milhões de registros por dia, observei ganhos claros em uso de memória e velocidade de execução — sem precisar reescrever bases de código existentes.&lt;/p&gt;

&lt;p&gt;Em casos reais, como sistemas de ingestão de dados que desenvolvi para instituições financeiras, economizar milissegundos por requisição resultou em grande economia de infraestrutura e melhor resposta ao usuário.&lt;/p&gt;

&lt;h2 id=&quot;️-recursos-modernos-da-linguagem--código-mais-limpo&quot;&gt;🛠️ Recursos modernos da linguagem = Código mais limpo&lt;/h2&gt;

&lt;p&gt;O C# 12, que acompanha o .NET 8, continua simplificando a experiência do desenvolvedor. Recursos como construtores primários para classes e expressões de coleção permitem escrever código mais expressivo e compacto. Combinados com tipos referenciais anuláveis e melhorias em pattern matching, essas adições contribuem diretamente para uma lógica de backend mais limpa e segura.&lt;/p&gt;

&lt;p&gt;Percebi que isso também facilita o onboarding de desenvolvedores juniores. A linguagem incentiva a escrita de código claro e com intenção explícita, essencial ao trabalhar em times multifuncionais ou ao transferir projetos entre squads.&lt;/p&gt;

&lt;h2 id=&quot;️-integração-perfeita-com-a-nuvem-azure&quot;&gt;☁️ Integração perfeita com a nuvem Azure&lt;/h2&gt;

&lt;p&gt;Uma das maiores forças do .NET 8 é sua integração profunda com o Microsoft Azure. Seja implementando Azure Functions, Durable Functions para fluxos de trabalho longos ou Event Grid para desacoplar microsserviços, o suporte das ferramentas e SDKs no .NET é incomparável.&lt;/p&gt;

&lt;p&gt;Já construí sistemas com .NET 8 que escalam de zero a milhares de requisições por segundo usando Azure Functions, mantendo observabilidade via Application Insights e logs com Serilog + ELK Stack. Essas integrações economizam tempo e reduzem significativamente o risco de erros em produção.&lt;/p&gt;

&lt;h2 id=&quot;-testes-e-observabilidade-de-primeira-classe&quot;&gt;🧪 Testes e observabilidade de primeira classe&lt;/h2&gt;

&lt;p&gt;O suporte nativo do .NET para testes unitários (com xUnit, MSTest ou NUnit) é maduro e bem documentado. Com bibliotecas de mocking como Moq e FluentAssertions, consigo garantir que meus serviços estejam cobertos por testes significativos e fáceis de manter. O .NET 8 facilita ainda mais a integração dos testes em pipelines CI/CD usando GitHub Actions ou Azure DevOps.&lt;/p&gt;

&lt;p&gt;No lado da observabilidade, o logging estruturado com Serilog e a integração com OpenTelemetry permitem rastrear requisições de ponta a ponta — mesmo em serviços distribuídos.&lt;/p&gt;

&lt;h2 id=&quot;-suporte-de-longo-prazo-e-estabilidade-do-ecossistema&quot;&gt;🔄 Suporte de longo prazo e estabilidade do ecossistema&lt;/h2&gt;

&lt;p&gt;Como engenheiro sênior, preciso construir sistemas que não sejam apenas funcionais hoje, mas também fáceis de manter e seguros no futuro. O .NET 8 é uma versão LTS (Long-Term Support), tornando-o uma escolha confiável para aplicações de nível empresarial. Não preciso me preocupar com APIs obsoletas ou pacotes instáveis — o ecossistema da Microsoft e a maturidade das bibliotecas NuGet me dão tranquilidade.&lt;/p&gt;

&lt;h2 id=&quot;-o-veredito&quot;&gt;✅ O veredito&lt;/h2&gt;

&lt;p&gt;O .NET 8 não é apenas uma atualização de versão. É um marco em uma plataforma madura e testada, que continua evoluindo na direção certa. Ele equilibra performance, produtividade e estabilidade — três pilares da boa engenharia de software.&lt;/p&gt;

&lt;p&gt;Para desenvolvedores focados em sistemas de backend, especialmente em áreas como finanças, saúde ou SaaS empresarial, o .NET 8 oferece uma base moderna e robusta para construir soluções de alta qualidade.&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Jun 2025 10:25:00 -0300</pubDate>
        <link>http://matheus-vieira.github.io/blog/pt-br/dotnet-e-fundamentos-azure/por-que-uso-dotnet-para-solucoes-modernas-de-backend/</link>
        <guid isPermaLink="true">http://matheus-vieira.github.io/blog/pt-br/dotnet-e-fundamentos-azure/por-que-uso-dotnet-para-solucoes-modernas-de-backend/</guid>
        
        <category>dotnet</category>
        
        <category>dotnet</category>
        
        <category>core</category>
        
        <category>.net</category>
        
        <category>.net-core</category>
        
        <category>azure</category>
        
        
        <category>pt-br</category>
        
        <category>dotnet-e-fundamentos-azure</category>
        
      </item>
    
      <item>
        <title>.NET Pro tips - Configurando banco de Dados</title>
        <description>&lt;p&gt;Esse artigo faz parte de uma série de artigos sobre como utilizar o EFCore com múltiplos providers de banco de dados. Se quiser veja outras partes dessa série em &lt;a href=&quot;#related&quot;&gt;links relacionados&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configurando-banco-de-dados-em-um-projeto-net-core&quot;&gt;Configurando banco de dados em um projeto .NET Core&lt;/h2&gt;

&lt;p&gt;Neste ponto assumo que você já é familiarizado com projetos .NET e/ou .NET Core e portanto sabe implementar ou se necessário ler o site &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-3.1&quot;&gt;AS.NET Documentation&lt;/a&gt; para saber como iniciar a configuração de um banco de dados.&lt;/p&gt;

&lt;p&gt;Aqui mostrarei uma possível ideia de implementação de um projeto de acesso a banco de dados.&lt;/p&gt;

&lt;p&gt;Algo que acaba me incomodando é as pessoas utilizarem exemplos da própria documentação e manter isso por toda a vida do projeto.&lt;/p&gt;

&lt;p&gt;Primeiro exemplo que quero apresentar é sobre como utilizar o princípio de responsabilidade única ao criarmos um projeto de banco de dados.&lt;/p&gt;

&lt;p&gt;Sabemos que no método &lt;code&gt;ConfigureServices&lt;/code&gt; da classe &lt;code&gt;Startup&lt;/code&gt; precisamos, como o nome propõe, configurar nossos serviços, e nosso banco de dados é um serviço de nossa aplicação.&lt;/p&gt;

&lt;p&gt;Aqui temos um exemplo da própria &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/intro?view=aspnetcore-3.1#register-the-schoolcontext&quot;&gt;documentação&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public void ConfigureServices(IServiceCollection services)
{
    services.Configure&amp;lt;CookiePolicyOptions&amp;gt;(options =&amp;gt;
    {
        options.CheckConsentNeeded = context =&amp;gt; true;
        options.MinimumSameSitePolicy = SameSiteMode.None;
    });

    services.AddDbContext&amp;lt;SchoolContext&amp;gt;(options =&amp;gt;
        options.UseSqlServer(Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));

    services.AddMvc();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
O projeto que possui a classe &lt;code&gt;Startup&lt;/code&gt; deve basicamente, se por exemplo o projeto for de uma API:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Carregar o(s) arquivo(s) de configuração&lt;/li&gt;
  &lt;li&gt;Configurar as rotas&lt;/li&gt;
  &lt;li&gt;E solicitar aos serviços para que eles configurem o que for necessário.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O ponto chave do &lt;code&gt;ConfigureServices&lt;/code&gt; é a chamada ao método (de extensão) &lt;code&gt;AddDbContext&lt;/code&gt;, ao meu ver isso é algo que o próprio projeto de banco de dados deve ser o responsável pela sua configuração.&lt;/p&gt;

&lt;p&gt;Para isso podemos utilizar um &lt;a href=&quot;/blog/pt-br/dotnet-pro-tips/extension-methods&quot;&gt;métodos de extensão&lt;/a&gt; no projeto que faz sentido.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Caso seu sistema possua uma camada de serviço entre a controller e o banco de dados então a classe &lt;code&gt;Startup&lt;/code&gt; deve conhecer apenas o a camada de serviço.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Um exemplo de método de extensão:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;namespace ContosoUniversity.Data.Extension
{
    public static class RepositoryExtension
    {
        public static void UseDataRepository(this IServiceCollection services, IConfiguration configuration)
        {
            services.AddDbContext&amp;lt;SchoolContext&amp;gt;(options =&amp;gt;
                options.UseSqlServer(configuration.GetConnectionString(&quot;DefaultConnection&quot;)));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Eu acho interessante utilizar o prefixo &lt;code&gt;Use&lt;/code&gt;, mas é gosto pessoal, pode usar o nome que desejar.&lt;/p&gt;

  &lt;p&gt;O foco aqui é extender a interface &lt;code&gt;IServiceCollection&lt;/code&gt; recebendo a interface &lt;code&gt;IConfiguration&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Agora podemos ver que a responsabilidade da &lt;code&gt;Startup&lt;/code&gt; é pedir para o serviço se configurar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;// código omitido
using ContosoUniversity.Data.Extension; // não esqueça de adicionar o using para o método de extensã

// código omitido

public void ConfigureServices(IServiceCollection services)
{
    services.Configure&amp;lt;CookiePolicyOptions&amp;gt;(options =&amp;gt;
    {
        options.CheckConsentNeeded = context =&amp;gt; true;
        options.MinimumSameSitePolicy = SameSiteMode.None;
    });

    services.UseDataRepository(Configuration);

    services.AddMvc();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Toda a complexidade foi removida da classe de inicialização e encapsulada dentro do projeto responsável.&lt;/p&gt;

&lt;p&gt;Como comentado acima, caso o seu sistema possua uma camada de serviço a implementação deve seguir a mesma ideia.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;namespace ContosoUniversity.ServiceLayer.Extension
{
    public static class ServiceLayerExtension
    {
        public static void UseServiceLayer(this IServiceCollection services, IConfiguration configuration)
        {
            // qualquer configuraçãp necessária
            
            // configurar o acesso ao banco
            services.UseDataRepository(Configuration);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Com isso devemos apenas mudar nossa classe de &lt;code&gt;Startup&lt;/code&gt; de forma a chamar o método que ele conhece&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;// código omitido
using ContosoUniversity.ServiceLayer.Extension; // não esqueça de adicionar o using para o método de extensã

// código omitido

public void ConfigureServices(IServiceCollection services)
{
    services.Configure&amp;lt;CookiePolicyOptions&amp;gt;(options =&amp;gt;
    {
        options.CheckConsentNeeded = context =&amp;gt; true;
        options.MinimumSameSitePolicy = SameSiteMode.None;
    });

    services.UseServiceLayer(Configuration);

    services.AddMvc();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Perceba agora que temos todas as configurações em seus devidos lugares, portanto se ocorrer a necessidade de se reconfigurar algo (seja da camada de serviço ou de banco de dados) será uma configuração transaparente e somente quem é responsável fica sabendo da alteração.&lt;/p&gt;

&lt;p&gt;Em outras palavras, nossa camada de API não sabe se os dados recebidos por ela e repassado à camada de serviço será gravados efetivamente em um banco de dados, ou se chamará outra API externa, isso não é responsabilidade da API.&lt;/p&gt;

&lt;h4 id=&quot;related&quot;&gt;Links para artigos relacionados&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;/blog/pt-br/dotnet-pro-tips/intro/&quot;&gt;.NET Pro tips Multiple Databases Providers Introduction&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/pt-br/dotnet-pro-tips/extension-methods&quot;&gt;Parte 1 - Métodos de extensão&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/pt-br/dotnet-pro-tips/configuring-db&quot;&gt;Parte 2 - Configurando o banco de dados&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Aug 2020 07:20:00 -0300</pubDate>
        <link>http://matheus-vieira.github.io/blog/pt-br/dotnet-pro-tips/configuring-db/</link>
        <guid isPermaLink="true">http://matheus-vieira.github.io/blog/pt-br/dotnet-pro-tips/configuring-db/</guid>
        
        <category>.net-core</category>
        
        <category>.net</category>
        
        <category>tips</category>
        
        
        <category>pt-br</category>
        
        <category>dotnet-pro-tips</category>
        
      </item>
    
  </channel>
</rss>
